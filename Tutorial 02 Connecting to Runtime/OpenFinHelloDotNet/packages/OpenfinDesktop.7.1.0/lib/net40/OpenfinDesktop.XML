<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenfinDesktop</name>
    </assembly>
    <members>
        <member name="T:Openfin.Desktop.Ack">
            <summary>
                A message that is delivered to an AckListener when an action has 
                been processed by AppDesktop
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Ack.#ctor(Newtonsoft.Json.Linq.JObject,System.Object)">
            <summary>
                class Ack constructor.
            </summary>
            <param name="message">The message being delivered to the AckListener.</param>
            <param name="source">The message source.</param>
        </member>
        <member name="M:Openfin.Desktop.Ack.isSuccessful">
            <summary>
                Returns true if message contains "success":"true".
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Ack.getJsonObject">
            <summary>
                Returns the message as a JObject.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Ack.getData">
            <summary>
                Returns the value of "data" from message as JObject.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Ack.getSource">
            <summary>
                Returns the message source.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Api.Chromium.ChromiumHelloMessage.MessageType">
            <summary>
            The value of the message type specified in the message header
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Api.Chromium.ChromiumHelloMessage.Payload">
            <summary>
            The PID of the connecting process
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Api.Chromium.ChromiumMessage`1.Header">
            <summary>
            The Chromium "Pickle" message header
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Api.Chromium.ChromiumMessage`1.Payload">
            <summary>
            The Chromium message payload
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Api.Chromium.ChromiumStringMessage.MessageType">
            <summary>
            The value of the message type specified in the message header
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Api.Chromium.ChromiumStringMessage.Payload">
            <summary>
            The message string
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Api.Chromium.IChromiumMessage.Header">
            <summary>
            The Chromium "Pickle" message header
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Api.Chromium.IChromiumMessage.Payload">
            <summary>
            The Chromium message payload
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ChromiumNetErrorCode">
            <summary>
            Enumeration of possible internal errors when Http response cant be delivered
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.None">
            <summary>
            No error has occurred.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.IoPending">
            <summary>
            An asynchronous IO operation is not yet complete.  This usually does not
            indicate a fatal error.  Typically this error will be generated as a
            notification to wait for some external notification that the IO operation
            finally completed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Failed">
            <summary>
            A generic failure occurred.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Aborted">
            <summary>
            An operation was aborted (due to user action).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InvalidArgument">
            <summary>
            An argument to the function is incorrect.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InvalidHandle">
            <summary>
            The handle or file descriptor is invalid.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FileNotFound">
            <summary>
            The file or directory cannot be found.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.TimedOut">
            <summary>
            An operation timed out.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FileTooBig">
            <summary>
            The file is too large.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Unexpected">
            <summary>
            An unexpected error.  This may be caused by a programming mistake or an
            invalid assumption.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.AccessDenied">
            <summary>
            Permission to access a resource, other than the network, was denied.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NotImplemented">
            <summary>
            The operation failed because of unimplemented functionality.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InsufficientResources">
            <summary>
            There were not enough resources to complete the operation.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.OutOfMemory">
            <summary>
            Memory allocation failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UploadFileChanged">
            <summary>
            The file upload failed because the file's modification time was different
            from the expectation.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SocketNotConnected">
            <summary>
            The socket is not connected.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FileExists">
            <summary>
            The file already exists.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FilePathTooLong">
            <summary>
            The path or file name is too long.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FileNoSpace">
            <summary>
            Not enough room left on the disk.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FileVirusInfected">
            <summary>
            The file has a virus.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.BlockedByClient">
            <summary>
            The client chose to block the request.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NetworkChanged">
            <summary>
            The network changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.BlockedByAdministrator">
            <summary>
            The request was blocked by the URL blacklist configured by the domain
            administrator.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SocketIsConnected">
            <summary>
            The socket is already connected.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.BlockedEnrollmentCheckPending">
            <summary>
            The request was blocked because the forced reenrollment check is still
            pending. This error can only occur on ChromeOS.
            The error can be emitted by code in chrome/browser/policy/policy_helpers.cc.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UploadStreamRewindNotSupported">
            <summary>
            The upload failed because the upload stream needed to be re-read, due to a
            retry or a redirect, but the upload stream doesn't support that operation.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ContextShutDown">
            <summary>
            The request failed because the URLRequestContext is shutting down, or has
            been shut down.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.BlockedByResponse">
            <summary>
            The request failed because the response was delivered along with requirements
            which are not met ('X-Frame-Options' and 'Content-Security-Policy' ancestor
            checks, for instance).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.BlockedByXssAuditor">
            <summary>
            The request failed after the response was received, based on client-side
            heuristics that point to the possiblility of a cross-site scripting attack.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CleartextNotPermitted">
            <summary>
            The request was blocked by system policy disallowing some or all cleartext
            requests. Used for NetworkSecurityPolicy on Android.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ConnectionClosed">
            <summary>
            A connection was closed (corresponding to a TCP FIN).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ConnectionReset">
            <summary>
            A connection was reset (corresponding to a TCP RST).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ConnectionRefused">
            <summary>
            A connection attempt was refused.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ConnectionAborted">
            <summary>
            A connection timed out as a result of not receiving an ACK for data sent.
            This can include a FIN packet that did not get ACK'd.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ConnectionFailed">
            <summary>
            A connection attempt failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NameNotResolved">
            <summary>
            The host name could not be resolved.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InternetDisconnected">
            <summary>
            The Internet connection has been lost.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslProtocolError">
            <summary>
            An SSL protocol error occurred.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.AddressInvalid">
            <summary>
            The IP address or port number is invalid (e.g., cannot connect to the IP
            address 0 or the port 0).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.AddressUnreachable">
            <summary>
            The IP address is unreachable.  This usually means that there is no route to
            the specified host or network.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslClientAuthCertNeeded">
            <summary>
            The server requested a client certificate for SSL client authentication.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.TunnelConnectionFailed">
            <summary>
            A tunnel connection through the proxy could not be established.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NoSslVersionsEnabled">
            <summary>
            No SSL protocol versions are enabled.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslVersionOrCipherMismatch">
            <summary>
            The client and server don't support a common SSL protocol version or
            cipher suite.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslRenegotiationRequested">
            <summary>
            The server requested a renegotiation (rehandshake).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ProxyAuthUnsupported">
            <summary>
            The proxy requested authentication (for tunnel establishment) with an
            unsupported method.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertErrorInSslRenegotiation">
             <summary>
             During SSL renegotiation (rehandshake), the server sent a certificate with
             an error.
            
             Note: this error is not in the -2xx range so that it won't be handled as a
             certificate error.
             </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.BadSslClientAuthCert">
            <summary>
            The SSL handshake failed because of a bad or missing client certificate.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ConnectionTimedOut">
            <summary>
            A connection attempt timed out.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.HostResolverQueueTooLarge">
            <summary>
            There are too many pending DNS resolves, so a request in the queue was
            aborted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SocksConnectionFailed">
            <summary>
            Failed establishing a connection to the SOCKS proxy server for a target host.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SocksConnectionHostUnreachable">
            <summary>
            The SOCKS proxy server failed establishing connection to the target host
            because that host is unreachable.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.AlpnNegotiationFailed">
            <summary>
            The request to negotiate an alternate protocol failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslNoRenegotiation">
            <summary>
            The peer sent an SSL no_renegotiation alert message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.WinsockUnexpectedWrittenBytes">
            <summary>
            Winsock sometimes reports more data written than passed.  This is probably
            due to a broken LSP.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslDecompressionFailureAlert">
            <summary>
            An SSL peer sent us a fatal decompression_failure alert. This typically
            occurs when a peer selects DEFLATE compression in the mistaken belief that
            it supports it.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslBadRecordMacAlert">
            <summary>
            An SSL peer sent us a fatal bad_record_mac alert. This has been observed
            from servers with buggy DEFLATE support.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ProxyAuthRequested">
            <summary>
            The proxy requested authentication (for tunnel establishment).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslWeakServerEphemeralDhKey">
            <summary>
            The SSL server attempted to use a weak ephemeral Diffie-Hellman key.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ProxyConnectionFailed">
            <summary>
            Could not create a connection to the proxy server. An error occurred
            either in resolving its name, or in connecting a socket to it.
            Note that this does NOT include failures during the actual "CONNECT" method
            of an HTTP proxy.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.MandatoryProxyConfigurationFailed">
            <summary>
            A mandatory proxy configuration could not be used. Currently this means
            that a mandatory PAC script could not be fetched, parsed or executed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.PreconnectMaxSocketLimit">
            <summary>
            We've hit the max socket limit for the socket pool while preconnecting.  We
            don't bother trying to preconnect more sockets.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslClientAuthPrivateKeyAccessDenied">
            <summary>
            The permission to use the SSL client certificate's private key was denied.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslClientAuthCertNoPrivateKey">
            <summary>
            The SSL client certificate has no private key.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ProxyCertificateInvalid">
            <summary>
            The certificate presented by the HTTPS Proxy was invalid.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NameResolutionFailed">
            <summary>
            An error occurred when trying to do a name resolution (DNS).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NetworkAccessDenied">
            <summary>
            Permission to access the network was denied. This is used to distinguish
            errors that were most likely caused by a firewall from other access denied
            errors. See also ERR_ACCESS_DENIED.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.TemporarilyThrottled">
            <summary>
            The request throttler module cancelled this request to avoid DDOS.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.HttpsProxyTunnelResponse">
            <summary>
            A request to create an SSL tunnel connection through the HTTPS proxy
            received a non-200 (OK) and non-407 (Proxy Auth) response.  The response
            body might include a description of why the request failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslClientAuthSignatureFailed">
             <summary>
             We were unable to sign the CertificateVerify data of an SSL client auth
             handshake with the client certificate's private key.
            
             Possible causes for this include the user implicitly or explicitly
             denying access to the private key, the private key may not be valid for
             signing, the key may be relying on a cached handle which is no longer
             valid, or the CSP won't allow arbitrary data to be signed.
             </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.MsgTooBig">
            <summary>
            The message was too large for the transport.  (for example a UDP message
            which exceeds size threshold).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdySessionAlreadyExists">
            <summary>
            A SPDY session already exists, and should be used instead of this connection.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.WsProtocolError">
            <summary>
            Websocket protocol error. Indicates that we are terminating the connection
            due to a malformed frame or other protocol violation.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.AddressInUse">
            <summary>
            Returned when attempting to bind an address that is already in use.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslHandshakeNotCompleted">
            <summary>
            An operation failed because the SSL handshake has not completed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslBadPeerPublicKey">
            <summary>
            SSL peer's public key is invalid.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslPinnedKeyNotInCertChain">
            <summary>
            The certificate didn't match the built-in public key pins for the host name.
            The pins are set in net/http/transport_security_state.cc and require that
            one of a set of public keys exist on the path from the leaf to the root.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ClientAuthCertTypeUnsupported">
            <summary>
            Server request for client certificate did not contain any types we support.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.OriginBoundCertGenerationTypeMismatch">
            <summary>
            Server requested one type of cert, then requested a different type while the
            first was still being generated.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslDecryptErrorAlert">
            <summary>
            An SSL peer sent us a fatal decrypt_error alert. This typically occurs when
            a peer could not correctly verify a signature (in CertificateVerify or
            ServerKeyExchange) or validate a Finished message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.WsThrottleQueueTooLarge">
            <summary>
            There are too many pending WebSocketJob instances, so the new job was not
            pushed to the queue.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslServerCertChanged">
            <summary>
            The SSL server certificate changed in a renegotiation.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslUnrecognizedNameAlert">
            <summary>
            The SSL server sent us a fatal unrecognized_name alert.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SocketSetReceiveBufferSizeError">
            <summary>
            Failed to set the socket's receive buffer size as requested.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SocketSetSendBufferSizeError">
            <summary>
            Failed to set the socket's send buffer size as requested.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SocketReceiveBufferSizeUnchangeable">
            <summary>
            Failed to set the socket's receive buffer size as requested, despite success
            return code from setsockopt.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SocketSendBufferSizeUnchangeable">
            <summary>
            Failed to set the socket's send buffer size as requested, despite success
            return code from setsockopt.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslClientAuthCertBadFormat">
            <summary>
            Failed to import a client certificate from the platform store into the SSL
            library.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.IcannNameCollision">
            <summary>
            Resolving a hostname to an IP address list included the IPv4 address
            "127.0.53.53". This is a special IP address which ICANN has recommended to
            indicate there was a name collision, and alert admins to a potential
            problem.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslServerCertBadFormat">
            <summary>
            The SSL server presented a certificate which could not be decoded. This is
            not a certificate error code as no X509Certificate object is available. This
            error is fatal.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CtSthParsingFailed">
            <summary>
            Certificate Transparency: Received a signed tree head that failed to parse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CtSthIncomplete">
            <summary>
            Certificate Transparency: Received a signed tree head whose JSON parsing was
            OK but was missing some of the fields.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UnableToReuseConnectionForProxyAuth">
            <summary>
            The attempt to reuse a connection to send proxy auth credentials failed
            before the AuthController was used to generate credentials. The caller should
            reuse the controller with a new connection. This error is only used
            internally by the network stack.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CtConsistencyProofParsingFailed">
            <summary>
            Certificate Transparency: Failed to parse the received consistency proof.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SslObsoleteCipher">
            <summary>
            The SSL server required an unsupported cipher suite that has since been
            removed. This error will temporarily be signaled on a fallback for one or two
            releases immediately following a cipher suite's removal, after which the
            fallback will be removed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.WsUpgrade">
            <summary>
            When a WebSocket handshake is done successfully and the connection has been
            upgraded, the URLRequest is cancelled with this error code.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertCommonNameInvalid">
             <summary>
             Certificate error codes
            
             The values of certificate error codes must be consecutive.
            
             The server responded with a certificate whose common name did not match
             the host name.  This could mean:
            
             1. An attacker has redirected our traffic to their server and is
                presenting a certificate for which they know the private key.
            
             2. The server is misconfigured and responding with the wrong cert.
            
             3. The user is on a wireless network and is being redirected to the
                network's login page.
            
             4. The OS has used a DNS search suffix and the server doesn't have
                a certificate for the abbreviated name in the address bar.
            
             </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertDateInvalid">
             <summary>
             The server responded with a certificate that, by our clock, appears to
             either not yet be valid or to have expired.  This could mean:
            
             1. An attacker is presenting an old certificate for which they have
                managed to obtain the private key.
            
             2. The server is misconfigured and is not presenting a valid cert.
            
             3. Our clock is wrong.
            
             </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertAuthorityInvalid">
             <summary>
             The server responded with a certificate that is signed by an authority
             we don't trust.  The could mean:
            
             1. An attacker has substituted the real certificate for a cert that
                contains their public key and is signed by their cousin.
            
             2. The server operator has a legitimate certificate from a CA we don't
                know about, but should trust.
            
             3. The server is presenting a self-signed certificate, providing no
                defense against active attackers (but foiling passive attackers).
            
             </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertContainsErrors">
             <summary>
             The server responded with a certificate that contains errors.
             This error is not recoverable.
            
             MSDN describes this error as follows:
               "The SSL certificate contains errors."
             NOTE: It's unclear how this differs from ERR_CERT_INVALID. For consistency,
             use that code instead of this one from now on.
            
             </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertNoRevocationMechanism">
            <summary>
            The certificate has no mechanism for determining if it is revoked.  In
            effect, this certificate cannot be revoked.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertUnableToCheckRevocation">
             <summary>
             Revocation information for the security certificate for this site is not
             available.  This could mean:
            
             1. An attacker has compromised the private key in the certificate and is
                blocking our attempt to find out that the cert was revoked.
            
             2. The certificate is unrevoked, but the revocation server is busy or
                unavailable.
            
             </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertRevoked">
            <summary>
            The server responded with a certificate has been revoked.
            We have the capability to ignore this error, but it is probably not the
            thing to do.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertInvalid">
             <summary>
             The server responded with a certificate that is invalid.
             This error is not recoverable.
            
             MSDN describes this error as follows:
               "The SSL certificate is invalid."
            
             </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertWeakSignatureAlgorithm">
            <summary>
            The server responded with a certificate that is signed using a weak
            signature algorithm.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertNonUniqueName">
            <summary>
            The host name specified in the certificate is not unique.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertWeakKey">
            <summary>
            The server responded with a certificate that contains a weak key (e.g.
            a too-small RSA key).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertNameConstraintViolation">
            <summary>
            The certificate claimed DNS names that are in violation of name constraints.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertValidityTooLong">
            <summary>
            The certificate's validity period is too long.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertificateTransparencyRequired">
            <summary>
            Certificate Transparency was required for this connection, but the server
            did not provide CT information that complied with the policy.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertEnd">
            <summary>
            The value immediately past the last certificate error code.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InvalidUrl">
            <summary>
            The URL is invalid.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.DisallowedUrlScheme">
            <summary>
            The scheme of the URL is disallowed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UnknownUrlScheme">
            <summary>
            The scheme of the URL is unknown.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.TooManyRedirects">
            <summary>
            Attempting to load an URL resulted in too many redirects.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UnsafeRedirect">
            <summary>
            Attempting to load an URL resulted in an unsafe redirect (e.g., a redirect
            to file:// is considered unsafe).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UnsafePort">
            <summary>
            Attempting to load an URL with an unsafe port number.  These are port
            numbers that correspond to services, which are not robust to spurious input
            that may be constructed as a result of an allowed web construct (e.g., HTTP
            looks a lot like SMTP, so form submission to port 25 is denied).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InvalidResponse">
            <summary>
            The server's response was invalid.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InvalidChunkedEncoding">
            <summary>
            Error in chunked transfer encoding.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.MethodNotSupported">
            <summary>
            The server did not support the request method.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UnexpectedProxyAuth">
            <summary>
            The response was 407 (Proxy Authentication Required), yet we did not send
            the request to a proxy.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.EmptyResponse">
            <summary>
            The server closed the connection without sending any data.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ResponseHeadersTooBig">
            <summary>
            The headers section of the response is too large.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.PacStatusNotOk">
            <summary>
            The PAC requested by HTTP did not have a valid status code (non-200).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.PacScriptFailed">
            <summary>
            The evaluation of the PAC script failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.RequestRangeNotSatisfiable">
            <summary>
            The response was 416 (Requested range not satisfiable) and the server cannot
            satisfy the range requested.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.MalformedIdentity">
            <summary>
            The identity used for authentication is invalid.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ContentDecodingFailed">
            <summary>
            Content decoding of the response body failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NetworkIoSuspended">
            <summary>
            An operation could not be completed because all network IO
            is suspended.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SynReplyNotReceived">
            <summary>
            FLIP data received without receiving a SYN_REPLY on the stream.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.EncodingConversionFailed">
            <summary>
            Converting the response to target encoding failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UnrecognizedFtpDirectoryListingFormat">
            <summary>
            The server sent an FTP directory listing in a format we do not understand.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InvalidSpdyStream">
            <summary>
            Attempted use of an unknown SPDY stream id.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NoSupportedProxies">
            <summary>
            There are no supported proxies in the provided list.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdyProtocolError">
            <summary>
            There is a SPDY protocol error.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InvalidAuthCredentials">
            <summary>
            Credentials could not be established during HTTP Authentication.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UnsupportedAuthScheme">
            <summary>
            An HTTP Authentication scheme was tried which is not supported on this
            machine.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.EncodingDetectionFailed">
            <summary>
            Detecting the encoding of the response failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.MissingAuthCredentials">
            <summary>
            (GSSAPI) No Kerberos credentials were available during HTTP Authentication.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UnexpectedSecurityLibraryStatus">
            <summary>
            An unexpected, but documented, SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.MisconfiguredAuthEnvironment">
            <summary>
            The environment was not set up correctly for authentication (for
            example, no KDC could be found or the principal is unknown.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.UndocumentedSecurityLibraryStatus">
            <summary>
            An undocumented SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ResponseBodyTooBigToDrain">
            <summary>
            The HTTP response was too big to drain.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ResponseHeadersMultipleContentLength">
            <summary>
            The HTTP response contained multiple distinct Content-Length headers.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.IncompleteSpdyHeaders">
            <summary>
            SPDY Headers have been received, but not all of them - status or version
            headers are missing, so we're expecting additional frames to complete them.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.PacNotInDhcp">
            <summary>
            No PAC URL configuration could be retrieved from DHCP. This can indicate
            either a failure to retrieve the DHCP configuration, or that there was no
            PAC URL configured in DHCP.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ResponseHeadersMultipleContentDisposition">
            <summary>
            The HTTP response contained multiple Content-Disposition headers.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ResponseHeadersMultipleLocation">
            <summary>
            The HTTP response contained multiple Location headers.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdyServerRefusedStream">
            <summary>
            SPDY server refused the stream. Client should retry. This should never be a
            user-visible error.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdyPingFailed">
            <summary>
            SPDY server didn't respond to the PING message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ContentLengthMismatch">
            <summary>
            The HTTP response body transferred fewer bytes than were advertised by the
            Content-Length header when the connection is closed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.IncompleteChunkedEncoding">
            <summary>
            The HTTP response body is transferred with Chunked-Encoding, but the
            terminating zero-length chunk was never sent when the connection is closed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.QuicProtocolError">
            <summary>
            There is a QUIC protocol error.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ResponseHeadersTruncated">
            <summary>
            The HTTP headers were truncated by an EOF.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.QuicHandshakeFailed">
            <summary>
            The QUIC crytpo handshake failed.  This means that the server was unable
            to read any requests sent, so they may be resent.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdyInadequateTransportSecurity">
            <summary>
            Transport security is inadequate for the SPDY version.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdyFlowControlError">
            <summary>
            The peer violated SPDY flow control.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdyFrameSizeError">
            <summary>
            The peer sent an improperly sized SPDY frame.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdyCompressionError">
            <summary>
            Decoding or encoding of compressed SPDY headers failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ProxyAuthRequestedWithNoConnection">
            <summary>
            Proxy Auth Requested without a valid Client Socket Handle.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Http11Required">
            <summary>
            HTTP_1_1_REQUIRED error code received on HTTP/2 session.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ProxyHttp11Required">
            <summary>
            HTTP_1_1_REQUIRED error code received on HTTP/2 session to proxy.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.PacScriptTerminated">
            <summary>
            The PAC script terminated fatally and must be reloaded.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InvalidHttpResponse">
            <summary>
            The server was expected to return an HTTP/1.x response, but did not. Rather
            than treat it as HTTP/0.9, this error is returned.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ContentDecodingInitFailed">
            <summary>
            Initializing content decoding failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SpdyRstStreamNoErrorReceived">
            <summary>
            Received HTTP/2 RST_STREAM frame with NO_ERROR error code.  This error should
            be handled internally by HTTP/2 code, and should not make it above the
            SpdyStream layer.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheMiss">
            <summary>
            The cache does not have the requested entry.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheReadFailure">
            <summary>
            Unable to read from the disk cache.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheWriteFailure">
            <summary>
            Unable to write to the disk cache.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheOperationNotSupported">
            <summary>
            The operation is not supported for this entry.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheOpenFailure">
            <summary>
            The disk cache is unable to open this entry.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheCreateFailure">
            <summary>
            The disk cache is unable to create this entry.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheRace">
            <summary>
            Multiple transactions are racing to create disk cache entries. This is an
            internal error returned from the HttpCache to the HttpCacheTransaction that
            tells the transaction to restart the entry-creation logic because the state
            of the cache has changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheChecksumReadFailure">
            <summary>
            The cache was unable to read a checksum record on an entry. This can be
            returned from attempts to read from the cache. It is an internal error,
            returned by the SimpleCache backend, but not by any URLRequest methods
            or members.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheChecksumMismatch">
            <summary>
            The cache found an entry with an invalid checksum. This can be returned from
            attempts to read from the cache. It is an internal error, returned by the
            SimpleCache backend, but not by any URLRequest methods or members.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheLockTimeout">
            <summary>
            Internal error code for the HTTP cache. The cache lock timeout has fired.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CacheAuthFailureAfterRead">
            <summary>
            Received a challenge after the transaction has read some data, and the
            credentials aren't available.  There isn't a way to get them at that point.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.InsecureResponse">
            <summary>
            The server's response was insecure (e.g. there was a cert error).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.NoPrivateKeyForCert">
            <summary>
            An attempt to import a client certificate failed, as the user's key
            database lacked a corresponding private key.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.AddUserCertFailed">
            <summary>
            An error adding a certificate to the OS certificate database.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FtpFailed">
            <summary>
            A generic error for failed FTP control connection command.
            If possible, please use or add a more specific error code.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FtpServiceUnavailable">
            <summary>
            The server cannot fulfill the request at this point. This is a temporary
            error.
            FTP response code 421.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FtpTransferAborted">
            <summary>
            The server has aborted the transfer.
            FTP response code 426.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FtpFileBusy">
            <summary>
            The file is busy, or some other temporary error condition on opening
            the file.
            FTP response code 450.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FtpSyntaxError">
            <summary>
            Server rejected our command because of syntax errors.
            FTP response codes 500, 501.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FtpCommandNotSupported">
            <summary>
            Server does not support the command we issued.
            FTP response codes 502, 504.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.FtpBadCommandSequence">
            <summary>
            Server rejected our command because we didn't issue the commands in right
            order.
            FTP response code 503.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Pkcs12ImportBadPassword">
            <summary>
            PKCS #12 import failed due to incorrect password.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Pkcs12ImportFailed">
            <summary>
            PKCS #12 import failed due to other error.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ImportCaCertNotCa">
            <summary>
            CA import failed - not a CA cert.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ImportCertAlreadyExists">
            <summary>
            Import failed - certificate already exists in database.
            Note it's a little weird this is an error but reimporting a PKCS12 is ok
            (no-op).  That's how Mozilla does it, though.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ImportCaCertFailed">
            <summary>
            CA import failed due to some other error.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.ImportServerCertFailed">
            <summary>
            Server certificate import failed due to some internal error.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Pkcs12ImportInvalidMac">
            <summary>
            PKCS #12 import failed due to invalid MAC.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Pkcs12ImportInvalidFile">
            <summary>
            PKCS #12 import failed due to invalid/corrupt file.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.Pkcs12ImportUnsupported">
            <summary>
            PKCS #12 import failed due to unsupported features.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.KeyGenerationFailed">
            <summary>
            Key generation failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.PrivateKeyExportFailed">
            <summary>
            Failure to export private key.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.SelfSignedCertGenerationFailed">
            <summary>
            Self-signed certificate generation failed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.CertDatabaseChanged">
            <summary>
            The certificate database changed in some way.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.DnsMalformedResponse">
            <summary>
            DNS resolver received a malformed response.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.DnsServerRequiresTcp">
            <summary>
            DNS server requires TCP
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.DnsServerFailed">
            <summary>
            DNS server failed.  This error is returned for all of the following
            error conditions:
            1 - Format error - The name server was unable to interpret the query.
            2 - Server failure - The name server was unable to process this query
                due to a problem with the name server.
            4 - Not Implemented - The name server does not support the requested
                kind of query.
            5 - Refused - The name server refuses to perform the specified
                operation for policy reasons.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.DnsTimedOut">
            <summary>
            DNS transaction timed out.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.DnsCacheMiss">
            <summary>
            The entry was not found in cache, for cache-only lookups.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.DnsSearchEmpty">
            <summary>
            Suffix search list rules prevent resolution of the given host name.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ChromiumNetErrorCode.DnsSortError">
            <summary>
            Failed to sort addresses according to RFC3484.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ExternalApplicationEventArgs">
            <summary>
            Provides data for common OpenFin application events.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalApplicationEventArgs.EventType">
            <summary>
            The type of application event which was raised.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalApplicationEventArgs.ExternalApplication">
            <summary>
            The Openfin Application which raised the event.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalApplicationEventArgs.GetSource">
            <summary>
            Resolves the External Application from the other identity properties.
            </summary>
            <returns>The External Application which raised the event.</returns>
        </member>
        <member name="T:Openfin.Desktop.ExternalApplicationEventType">
            <summary>
            Specifies the type of action which raised an application event.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ExternalApplicationEventType.Started">
            <summary>
            The external process has started running.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ExternalApplicationEventType.Connected">
            <summary>
            The external process has connected to the OpenFin runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ExternalApplicationEventType.Disconnected">
            <summary>
            The external process has disconnected from the OpenFin runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ExternalApplicationEventType.Exited">
            <summary>
            The external process has exited.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ExternalApplicationEventType.ExternalApplicationConnected">
            <summary>
            An external application has connected to the OpenFin runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ExternalApplicationEventType.ExternalApplicationDisconnected">
            <summary>
            An external application has disconnected from the OpenFin runtime.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.HttpRequestMethod">
            <summary>
            Enumeration of Http methods that could be use to request the content
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpRequestMethod.Get">
            <summary>
            Retrieves the information or entity that is identified by the URI of the request.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpRequestMethod.Head">
            <summary>
            Retrieves the message headers for the information or entity that is identified by the URI of the request.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpRequestMethod.Post">
            <summary>
            Posts a new entity as an addition to a URI.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpRequestMethod.Put">
            <summary>
            Replaces an entity that is identified by a URI.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpRequestMethod.Delete">
            <summary>
            Requests that a specified URI be deleted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpRequestMethod.Trace">
            <summary>
            Invokes a remote, application-layer loopback of the request message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpRequestMethod.Connect">
            <summary>
            Connect to a proxy that can dynamically switch to being a tunnel.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpRequestMethod.Options">
            <summary>
            Returns the HTTP methods that the server supports.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.HttpResourceType">
            <summary>
            Type of the resource carried in the http response
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpResourceType.MainFrame">
            <summary>
            The main frame document.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpResourceType.SubFrame">
            <summary>
            A sub-frame document.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpResourceType.StyleSheet">
            <summary>
            A stylesheet.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpResourceType.Script">
            <summary>
            A script file.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpResourceType.Image">
            <summary>
            An image.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpResourceType.Object">
            <summary>
            An object.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpResourceType.Xhr">
            <summary>
            An XHR resource.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.HttpResourceType.Other">
            <summary>
            Any other resource type.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.AckCallback">
            <summary>
                Delegate for receiving Ack's from AppDesktop
            </summary>
        </member>
        <member name="T:Openfin.Desktop.OpenFinMessageHandler">
            <summary>
            Messages from the OpenFin runtime
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Openfin.Desktop.OpenFinErrorHandler">
            <summary>
            Errors from the OpenFin runtime
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Openfin.Desktop.ExternalMessageHandlerDelegate">
            <summary>
                Delegate for consuming external messages targeted at an application originating from HTTP/HTTPS.
            </summary>
            <param name="resultHandler">Sends the result status to the container</param>
            <param name="payload">The JSON sent via HTTP/HTTPS</param>
        </member>
        <member name="T:Openfin.Desktop.launchExternalProcessHandler">
            <summary>
                A delegate which receives a mapped process UUID from DesktopSystem.launchExternalProcess()
            </summary>
            <param name="result">Contains the resulting mapped UUID.</param>
        </member>
        <member name="T:Openfin.Desktop.terminateExternalProcessHandler">
            <summary>
                A delegate which is passed the resulting status of a process after DesktopSystem.terminateExternalProcess() has completed.
            </summary>
            <param name="result">Contains the status of the prorcess after the operation has completed.</param>
        </member>
        <member name="T:Openfin.Desktop.applicationGroupsHandler">
            <summary>
                A delegate to handle the returned groups and 
                their respective windows from Application.getGroups().
            </summary>
            <param name="groups">A list of groups and their member windows.</param>
        </member>
        <member name="T:Openfin.Desktop.childWindowHandler">
            <summary>
                A delegate to handle the resulting windows from 
                Application.getChildWindow().
            </summary>
            <param name="children"></param>
        </member>
        <member name="T:Openfin.Desktop.windowOptionsHandler">
            <summary>
                A delegate to handle the resulting options from 
                Window.getOptions().
            </summary>
            <param name="options">The options as returned by the desktop</param>
        </member>
        <member name="T:Openfin.Desktop.windowGroupHandler">
            <summary>
                A delegate to handle the returned grouped windows, if any, from Window.getGroup()
            </summary>
            
            <remarks>
                An empty list is returned if the window is not in a group. 
                The calling window is included in the resulting List.
            </remarks>
            <param name="group">A list of all the wrapped windows in the same group.</param>
        </member>
        <member name="T:Openfin.Desktop.windowInstanceHandler">
            <summary>
            A delegate to handle the returned window object.
            </summary>
            <param name="window"></param>
        </member>
        <member name="T:Openfin.Desktop.InterAppMessageHandler">
            <summary>
                A delegate that handles all sent/published messages.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.InterAppSubscriptionListener">
            <summary>
                A delegate that handles (un)subscription events on a 
                DesktopConnection's InterApplicationBus.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnectionState">
            <summary>
            The connection state of a DesktopConnection
            </summary>
        </member>
        <member name="F:Openfin.Desktop.DesktopConnectionState.Closed">
            <summary>
            The DesktopConnection is closed or has not been initialized
            </summary>
        </member>
        <member name="F:Openfin.Desktop.DesktopConnectionState.Initializing">
            <summary>
            The DesktopConnection is initializing
            </summary>
        </member>
        <member name="F:Openfin.Desktop.DesktopConnectionState.Initialized">
            <summary>
            The DesktopConneciton is initialized and ready to connect
            </summary>
        </member>
        <member name="F:Openfin.Desktop.DesktopConnectionState.Connecting">
            <summary>
            The DesktopConnection is attempting to connect to the runtime
            </summary>
        </member>
        <member name="F:Openfin.Desktop.DesktopConnectionState.Connected">
            <summary>
            The DesktopConnection is connected to the runtime
            </summary>
        </member>
        <member name="F:Openfin.Desktop.DesktopConnectionState.Closing">
            <summary>
            The DesktopConnection is closing its connection to the runtime
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ApplicationEventType">
            <summary>
            Specifies the type of action which raised an application event.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.Created">
            <summary>
            The application was created.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.RunRequested">
            <summary>
            The application is requesting to run.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.Started">
            <summary>
            The application has started running.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.Initialized">
            <summary>
            The application main window was created and has initialized.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.Connected">
            <summary>
            The application main window has connected to the OpenFin runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.Closed">
            <summary>
            The application was closed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.Crashed">
            <summary>
            The application crashed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.Error">
            <summary>
            The application had an error.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.NotResponding">
            <summary>
            The application is not responding.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.Responding">
            <summary>
            The application has started responding after not responding.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.OutOfMemory">
            <summary>
            The application has run out of memory.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.ApplicationCreated">
            <summary>
            An application was created.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.ApplicationStarted">
            <summary>
            An application was started.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.ApplicationClosed">
            <summary>
            An application was closed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.ApplicationEventType.ApplicationCrashed">
            <summary>
            An application has crashed.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ApplicationEventArgs">
            <summary>
            Provides data for common OpenFin application events.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationEventArgs.EventType">
            <summary>
            The type of application event which was raised.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationEventArgs.Application">
            <summary>
            The Openfin Application which raised the event.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ApplicationEventArgs.GetSource">
            <summary>
            Resolves the Application from the other identity properties.
            </summary>
            <returns>The Application which raised the event.</returns>
        </member>
        <member name="T:Openfin.Desktop.DesktopIconClickedEventArgs">
            <summary>
            Provides data for a desktop icon click event.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopIdleStateChangedEventArgs">
            <summary>
            Provides data for a desktop idle state change event.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopMonitorInfoChangedEventArgs">
            <summary>
            Provides data for a desktop monitor information change event.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopSessionChangedEventArgs">
            <summary>
            Provides data for a desktop session change event.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ResourceLoadFailedEventArgs">
            <summary>
            Provides data for failed content load event
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceLoadFailedEventArgs.ErrorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceLoadFailedEventArgs.ErrorDescription">
            <summary>
            Error description
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceLoadFailedEventArgs.ValidatedUrl">
            <summary>
            Validated URL
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceLoadFailedEventArgs.IsMainFrame">
            <summary>
            Indicates if failed to load content was a main frame
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ResourceResponseReceivedEventArgs">
            <summary>
            Provides data for response received event
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceResponseReceivedEventArgs.HttpResponseCode">
            <summary>
            Http response code information 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceResponseReceivedEventArgs.RequestMethod">
            <summary>
            Http method used to request the content
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceResponseReceivedEventArgs.NewUrl">
            <summary>
            Url navigated to with this response
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceResponseReceivedEventArgs.OriginalUrl">
            <summary>
            Url navigated from with the request
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceResponseReceivedEventArgs.ResourceType">
            <summary>
            Type of the resource conatined in the response
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ResourceResponseReceivedEventArgs.Headers">
            <summary>
            Http headers included in the response
            </summary>
        </member>
        <member name="T:Openfin.Desktop.RuntimeConnectionFailedEventArgs">
            <summary>
            Provides data for a runtime connection failed event.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ExternalApplication">
            <summary>
                An object representing an External Application.
                <para>
                    Allows the developer to listen to the events raised when an External
                    Application connects/disconnects from the runtime or whe it's started
                </para>
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalApplication.IsConnected">
            <summary>
            Gets the connection status if ExternalApplication is wrapped around OpenFin application
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalApplication.Parent">
            <summary>
            The Parent Entity which launched or is monitoring the External Application.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalApplication.Runtime">
            <summary>
            Gets the Runtime that created the Application.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalApplication.Uuid">
            <summary>
            Gets the UUID of the Application.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.ExternalApplication.Connected">
            <summary>
            Occurs when an external application connects to the runtime.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.ExternalApplication.Disconnected">
            <summary>
            Occurs when the external application is disconnected from the runtime.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.ExternalApplication.Started">
            <summary>
            Occurs when the external application is started.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.ExternalApplication.Exited">
            <summary>
            Occurs when the external application has exited.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalApplication.Dispose">
            <summary>
            Dispose the current application instance.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.AcceleratorKeyOptions">
            <summary>
            A class representing the predefined accelerator keys which can be enabled in OpenFin
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AcceleratorKeyOptions.DeveloperTools">
            <summary>
            Gets or sets a value indicating whether keyboard shortcut Ctrl+Shift+I toggles the Developer Tools
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AcceleratorKeyOptions.Reload">
            <summary>
            Gets or sets a value indicating whether keyboard shortcuts Ctrl+R and F5 reloads the current window
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AcceleratorKeyOptions.ReloadIgnoringCache">
            <summary>
            Gets or sets a value indicating whether keyboard shortcuts Ctrl+Shift+R and Shift+F5
            reloads the current window from source
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AcceleratorKeyOptions.Zoom">
            <summary>
            Gets or sets a value indicating whether zoom keyboard shortcuts are enabled for the current window (see Remarks)
            </summary>
            <remarks>
            When the Zoom property is set to <see langword="true"/>, the following keyboard shortcuts are enabled:
            - Ctrl + + and Ctrl + Shift + + zoom the current window in
            - Ctrl + - and Ctrl + Shift + - zoom the current window out
            - Ctrl + Scroll zooms the current window in and out
            - Ctrl + 0 restores the zoom level to 100%
            </remarks>
        </member>
        <member name="T:Openfin.Desktop.PreloadScript">
            <summary>
            A class representing a preload script entry for a given Openfin Application or Window
            </summary>
        </member>
        <member name="M:Openfin.Desktop.PreloadScript.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a preload script entry using the specified path and optional behavior.
            </summary>
            <param name="path">Absolute path, relative path, or URL of the preload script file</param>
            <param name="optional"></param>
        </member>
        <member name="P:Openfin.Desktop.PreloadScript.Path">
            <summary>
            Gets or sets the absolute path, relative path, or URL of the preload script file
            </summary>
        </member>
        <member name="P:Openfin.Desktop.PreloadScript.Url">
            <summary>
            Gets the absolute URL of the preload script file
            </summary>
        </member>
        <member name="P:Openfin.Desktop.PreloadScript.Optional">
            <summary>
            Gets or sets a value indicating if the preload script is optional
            </summary>
            <remarks>
            Setting this property to <see langword="true"/> allows the OpenFin Window to load
            even if the specified preload script fails to load from the specified URL.
            </remarks>
        </member>
        <member name="T:Openfin.Desktop.Shortcut">
            <summary>
            A class representing an Application shortcut.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Shortcut.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of a Shortcut object with the specified company name, icon, and shortcut name.
            </summary>
            <param name="company">The name of the company associated with the shortcut.</param>
            <param name="iconPath">The absolute path, relative path, or URL of the icon file to use for the shortcut.</param>
            <param name="name">The name of the shortcut.</param>
        </member>
        <member name="P:Openfin.Desktop.Shortcut.Company">
            <summary>
            Gets or sets the name of the company associated with the shortcut.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Shortcut.IconPath">
            <summary>
            Gets or sets the absolute path, relative path, or URL of the icon file to use for the shortcut.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Shortcut.Icon">
            <summary>
            Gets the absolute URL of the icon file to use for the shortcut.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Shortcut.Name">
            <summary>
            Gets or sets the name of the shortcut.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Shortcut.Description">
            <summary>
            Gets or sets the description of the shortcut.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Shortcut.Force">
            <summary>
            Gets or sets a value indicating if the shortcut should be recreated each time
            an Application is launched, even if the user previously has deleted the shortcut.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Shortcut.StartMenuRootFolder">
            <summary>
            Gets or sets the root folder to add the shortcut to the Start Menu.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Shortcut.UninstallShortcut">
            <summary>
            Gets or sets a value indicating whether an Uninstall Application shortcut
            should be created in the Start Menu.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.SupportInformation">
            <summary>
            A class representing support contact information if the RVM or an OpenFin Application encounters an error.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.SupportInformation.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of a SupportInformation object with the specified company name, product name, and email address.
            </summary>
            <param name="company">The company to contact if an error is encountered.</param>
            <param name="product">The product name to display as causing the error.</param>
            <param name="emailAddress">The product name to display as causing the error.</param>
        </member>
        <member name="P:Openfin.Desktop.SupportInformation.Company">
            <summary>
            Gets or sets the company to contact if an error is encountered.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.SupportInformation.Product">
            <summary>
            Gets or sets the product name to display as causing the error.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.SupportInformation.EmailAddress">
            <summary>
            Gets or sets the product name to display as causing the error.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.SupportInformation.ForwardErrorReports">
            <summary>
            Gets or sets a value indicating if users will be prompted with an option to
            automatically forward error reports to the specified EmailAddress.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.SupportInformation.EnableErrorReporting">
            <summary>
            Gets or sets a value indicating if error reporting is enabled.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.NamespaceDoc">
            <summary>
            C# API binding for the OpenFin App Desktop.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Messaging.NamespaceDoc">
            <summary>
            OpenFin Inter-Application Bus message, subscription, and monitoring classes.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Messaging.IMessageBusSubscription">
            <summary>
            Defines the interface for an InterApplicationBus subscription.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Messaging.IMessageBusSubscription.Source">
            <summary>
            The Openfin entity which is being subscribed to.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Messaging.IMessageBusSubscription.Topic">
            <summary>
            The topic of the subscription.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Messaging.IMessageBusSubscription`1">
            <summary>
            Defines the interface for an InterApplicationBus subscription with a generic message type.
            </summary>
            <typeparam name="TMessage">The type of the message data.</typeparam>
        </member>
        <member name="E:Openfin.Desktop.Messaging.IMessageBusSubscription`1.MessageReceived">
            <summary>
            Occurs when a message is received on the current subscription.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Messaging.IMessageBusSubscriptionMonitor">
            <summary>
            Defines the interface for an InterApplicationBus subscription monitor.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Messaging.IMessageBusSubscriptionMonitor.SubscriberAdded">
            <summary>
            Occurs when an Openfin entity has subscribed to the monitored set of subscriptions.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Messaging.IMessageBusSubscriptionMonitor.SubscriberRemoved">
            <summary>
            Occurs when an Openfin entity has unsubscribed from the monitired set of subscriptions.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Messaging.MessageBusMessageEventArgs`1">
            <summary>
            Provides data for an InterApplicationBus message event.
            </summary>
            <typeparam name="TMessage">The type of the message data.</typeparam>
        </member>
        <member name="M:Openfin.Desktop.Messaging.MessageBusMessageEventArgs`1.#ctor(Openfin.Desktop.IOpenfinEntity,Openfin.Desktop.IOpenfinEntity,System.String,`0)">
            <summary>
            Creates a new instance of the MessageBusMessageEventArgs class.
            </summary>
            <param name="source">The Openfin entity where the message originated from.</param>
            <param name="destination">The Openfin entity where the message was sent to.</param>
            <param name="topic">The message topic.</param>
            <param name="message">The message object that was sent.</param>
        </member>
        <member name="P:Openfin.Desktop.Messaging.MessageBusMessageEventArgs`1.Source">
            <summary>
            Gets the Openfin entity where the message originated from.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Messaging.MessageBusMessageEventArgs`1.Destination">
            <summary>
            Gets the Openfin entity where the message was sent to.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Messaging.MessageBusMessageEventArgs`1.Topic">
            <summary>
            Gets the message topic.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Messaging.MessageBusMessageEventArgs`1.Message">
            <summary>
            Gets the message object that was sent.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Messaging.MessageBusSubscriptionEventArgs">
            <summary>
            Provides data for an InterApplicationBus subscription event.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Messaging.MessageBusSubscriptionEventArgs.#ctor(Openfin.Desktop.IOpenfinEntity,Openfin.Desktop.IOpenfinEntity,System.String)">
            <summary>
            Initializes a new instance of the MessageBusSubscriptionEventArgs class.
            </summary>
            <param name="subscriber">The Openfin entity that created the subscription.</param>
            <param name="subscription">The Openfin entity that was subscribed to.</param>
            <param name="topic">The topic that was subscribed to.</param>
        </member>
        <member name="P:Openfin.Desktop.Messaging.MessageBusSubscriptionEventArgs.Subscriber">
            <summary>
            Gets the Openfin entity that created the subscription.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Messaging.MessageBusSubscriptionEventArgs.Subscription">
            <summary>
            Gets the Openfin entity that was subscribed to.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Messaging.MessageBusSubscriptionEventArgs.Topic">
            <summary>
            Gets the topic that was subscribed to.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Security.NamespaceDoc">
            <summary>
            OpenFin security helper classes.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Security.IAuthenticationRequest">
            <summary>
            Represents an HTTP basic authentication request.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Security.IAuthenticationRequest.Host">
            <summary>
            Gets the host requesting the authentication.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Security.IAuthenticationRequest.Port">
            <summary>
            Gets the port number of the current request.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Security.IAuthenticationRequest.IsProxy">
            <summary>
            Gets a value indicating whether the host is a proxy server.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Security.IAuthenticationRequest.Realm">
            <summary>
            Gets the realm attribute of the authentication challenge.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Security.IAuthenticationRequest.Scheme">
            <summary>
            Gets the scheme of the current request.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Security.IAuthenticationRequest.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the current request with the provided username and password.
            </summary>
            <param name="username">The provided username.</param>
            <param name="password">The provided password.</param>
        </member>
        <member name="M:Openfin.Desktop.Security.IAuthenticationRequest.Cancel">
            <summary>
            Cancels the current authentication request.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.OpenfinDesktopEventArgs">
            <summary>
            Defines the base class for Openfin events.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.OpenfinDesktopEventArgs.Source">
            <summary>
            The Openfin Entity which raised the event.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.OpenfinDesktopEventArgs.RuntimeID">
            <summary>
            The RuntimeID which contains the Entitiy which raised the event.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.OpenfinDesktopEventArgs.Uuid">
            <summary>
            The application or connection UUID which raised the event.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.OpenfinDesktopEventArgs.Name">
            <summary>
            The window name which raised the event.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.OpenfinDesktopEventArgs.GetSource">
            <summary>
            In derived classes, resolves the Openfin Entity from the other identity properties.
            </summary>
            <returns>The entity which raised the event.</returns>
        </member>
        <member name="T:Openfin.Desktop.WindowAlertRequestedEventArgs">
            <summary>
            Provides data for an Openfin window alert request.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowAlertRequestedEventArgs.Message">
            <summary>
            The Message that the requested alert would have displayed.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowAlertRequestedEventArgs.SourceUrl">
            <summary>
            Source URL that requested the alert.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.WindowAuthenticationRequestedEventArgs">
            <summary>
            Provides data for a on Openfin Window authentication request event.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowAuthenticationRequestedEventArgs.AuthenticationRequest">
            <summary>
            The HTTP authentication request.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.WindowEventArgs">
            <summary>
            Provides data for common OpenFin window events.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowEventArgs.EventType">
            <summary>
            The type of window event which was raised.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowEventArgs.Window">
            <summary>
            The Openfin Window which raised the event.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.WindowEventArgs.GetSource">
            <summary>
            Resolves the Window from the other identity properties.
            </summary>
            <returns>The Window which raised the event.</returns>
        </member>
        <member name="T:Openfin.Desktop.WindowEventType">
            <summary>
            Specifies the type of action which raised a window event.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Created">
            <summary>
            The window was created.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Initialized">
            <summary>
            The window was created and has been initialized.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Connected">
            <summary>
            The window has connected to the OpenFin runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.ShowRequested">
            <summary>
            The window is requesting to be shown.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Shown">
            <summary>
            The window was shown.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.CloseRequested">
            <summary>
            The window is requesting to be closed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Closed">
            <summary>
            The window was closed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Hidden">
            <summary>
            The window was hidden.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Maximized">
            <summary>
            The window was maximized.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Minimized">
            <summary>
            The window was minimized.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Restored">
            <summary>
            The window was restored.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Focused">
            <summary>
            The window was activated.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Blurred">
            <summary>
            The window was deactivated.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.DomContentLoaded">
            <summary>
            The window DOM content has loaded.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.FrameEnabled">
            <summary>
            The window frame was enabled.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.FrameDisabled">
            <summary>
            The window frame was disabled.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.AuthenticationRequested">
            <summary>
            The window is requesting authentication credentials.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.NotResponding">
            <summary>
            The window is not responding.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.Responding">
            <summary>
            The window has started responding after not responding.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.WindowCreated">
            <summary>
            A window was created.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.WindowClosed">
            <summary>
            A window was closed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.WindowAlertRequested">
            <summary>
            A window requested to show an alert box.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.WindowNavigationRejected">
            <summary>
            A window attempted to navigate to a blacklisted URL.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.WindowShowRequested">
            <summary>
            A window requested to be shown
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.WindowAuthenticationRequested">
            <summary>
            A window is requesting authentication credentials.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.WindowNotResponding">
            <summary>
            A window is not responding.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.WindowResponding">
            <summary>
            A window has started responding after not responding.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.ResourceResponseReceived">
            <summary>
            Resources for web content received 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.WindowEventType.ResourceLoadFailed">
            <summary>
            Resources for web content failed to load.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.WindowNavigationRejectedEventArgs">
            <summary>
            Provides data for an Openfin Window navigation rejected event.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowNavigationRejectedEventArgs.Url">
            <summary>
            The requested URL that was rejected.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.InterApplicationBus">
            <summary>
                A messaging bus that allows for pub / sub messaging between different applications.
                Available via getInterApplicationBus() method on DesktopConnection
            </summary>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.Publish(Openfin.Desktop.Runtime,System.String,System.Object)">
            <summary>
            Publishes a message to an entire runtime on a specified topic.
            </summary>
            <param name="runtime">The runtime which will receive the message.</param>
            <param name="topic">The message topic.</param>
            <param name="message">The value, object, or array to publish.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.Send(Openfin.Desktop.IOpenfinEntity,System.String,System.Object)">
            <summary>
            Sends a message to an InterApplicationBus Openfin entity on a specified topic.
            </summary>
            <param name="destination">The Openfin entity which will receive the message.</param>
            <param name="topic">The message topic.</param>
            <param name="message">The value, object, or array to send.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.Subscription``1(Openfin.Desktop.IOpenfinEntity,System.String)">
            <summary>
            Gets a subscription to an InterApplicationBus Openfin entity on a specified topic.
            </summary>
            <typeparam name="TMessage">The type of the message data.</typeparam>
            <param name="source">The Openfin entity which can be subscribed to.</param>
            <param name="topic">The message topic.</param>
            <returns>The subscription for the specified Openfin entity and topic.</returns>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.MonitorSubscriptions(Openfin.Desktop.IOpenfinEntity)">
            <summary>
            Gets a subscription monitor for a specified Openfin entity. 
            </summary>
            <param name="subscriber">The subscriber which can raise subscription events.</param>
            <returns>The subscription monitor for the specified Openfin entity.</returns>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.MonitorSubscriptions(Openfin.Desktop.IOpenfinEntity,System.String)">
            <summary>
            Gets a subscription monitor for a specified Openfin entity and topic.
            </summary>
            <param name="subscriber">The subscriber which can raise subscription events.</param>
            <param name="topic">The message topic to monitor.</param>
            <returns>The subscription monitor for the specified Openfin entity and topic.</returns>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.#ctor(Openfin.Desktop.DesktopConnection)">
            <summary>InterApplicationBus Constructor</summary>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.addSubscribeListener(Openfin.Desktop.InterAppSubscriptionListener)">
            <summary>
                Registers a listener which is called whenever a subscription occurs.
            </summary>
            <param name="listener">
                A function that is called whenever a subscription occurs.
                It is passed the topic and application UUID that trigered the event.
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.addUnsubscribeListener(Openfin.Desktop.InterAppSubscriptionListener)">
            <summary>
                Registers a listener which is called whenever an unsubscription occurs.
            </summary>
            <param name="listener">
                A function that is called whenever a unsubscription occurs.
                It is passed the topic and application UUID that trigered the event.
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.dispatchMessageToCallbacks(System.String,System.String,System.String,System.Object)">
            <summary>
                Dispatches a messages to listeners
            </summary>
            <param name="sourceUuid">UUID of the application from which messages are sent.</param>
            <param name="topic">Topic to which the mssage is published.</param>
            <param name="sourceWindowName">The name of the window which sent the message.</param>
            <param name="message">The JSON message to be dispatched.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.dispatchToSubscribeListeners(System.String,System.String)">
            <summary>
                Dispatches to subscription listeners
            </summary>
            <param name="uuid">The subscribing application.</param>
            <param name="topic">The topic that was subscribed to.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.dispatchToUnsubscribeListeners(System.String,System.String)">
            <summary>
                Dispatches to unsubscription listeners
            </summary>
            <param name="uuid">The unsubscribing application.</param>
            <param name="topic">The topic that was unsubscribed from.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.publish(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Publishes a message to a topic
            </summary>
            <param name="topic">The topic to which the message is published.</param>
            <param name="message">the JSON message to publish.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.Publish(System.String,System.Object)">
            <summary>
            Publishes a message to a topic
            </summary>
            <param name="topic">The topic to which the message is published.</param>
            <param name="message">the JSON message to publish.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.publish(System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Publishes a message to a topic
            </summary>
            <param name="topic">The topic to which the message is published.</param>
            <param name="message">the JSON message to publish.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.removeSubscribeListener(Openfin.Desktop.InterAppSubscriptionListener)">
            <summary>
                Removes the passed listener. 
                It is no longer called for subscription events.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.removeUnsubscribeListener(Openfin.Desktop.InterAppSubscriptionListener)">
            <summary>
                Removes the passed listener. 
                It is no longer called for unsubscription events.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.Send(System.String,System.String,System.Object)">
            <summary>
            Sends a message to the specified application on a given topic.
            </summary>
            <param name="destinationUuid">The UUID of the receiving application.</param>
            <param name="topic">The message topic.</param>
            <param name="message">The value, object, or array to send.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.Send(System.String,System.String,System.String,System.Object)">
            <summary>
            Sends a message to the specified application and window name on a given topic.
            </summary>
            <param name="destinationUuid">The UUID of the receiving application.</param>
            <param name="destinationName">The name of the receiving window.</param>
            <param name="topic">The message topic.</param>
            <param name="message">The value, object, or array to send.</param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.GenerateCallbackKey(System.String,System.String,System.String)">
            <summary>
            Generates a callback key for a subscription
            </summary>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.GenerateCallbackKeys(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates multiple callback keys for message or event dispatch
            </summary>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.subscribe(System.String,Openfin.Desktop.InterAppMessageHandler)">
            <summary>
                Subscribes to messages on the specified topic from all applications
            </summary>
            <param name="topic">The topic to be subscribed to.</param>
            <param name="listener">
                The listener that is to be passed messages on the specified topic
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.subscribe(System.String,System.String,Openfin.Desktop.InterAppMessageHandler)">
            <summary>
                Subscribes to messages on the specified topic from the specified application
            </summary>
            <param name="senderUuid">UUID of the sending application from which messages are sent.</param>
            <param name="topic">The topic to be subscribed to.</param>
            <param name="listener">
                The listener that is to be passed messages on the specified topic
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.subscribe(System.String,System.String,System.String,Openfin.Desktop.InterAppMessageHandler)">
            <summary>
                Subscribes to messages on the specified topic from the specified application and window.
            </summary>
            <param name="senderUuid">UUID of the sending application from which messages are sent.</param>
            <param name="sourceWindowName">The name of the window from which messages are sent.</param>
            <param name="topic">The topic to be subscribed to.</param>
            <param name="listener">
                The listener that is to be passed messages on the specified topic
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.unsubscribe(System.String,Openfin.Desktop.InterAppMessageHandler)">
            <summary>
                Unsubscribes to messages on the specified topic from all applications.
            </summary>
            <param name="topic">The topic to be unsubscribed from.</param>
            <param name="listener">
                The listener that will be removed and no longer passed messages on the topic.
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.unsubscribe(System.String,System.String,Openfin.Desktop.InterAppMessageHandler)">
            <summary>
                Unsubscribes to messages on the specified topic from the specified application.
            </summary>
            <param name="senderUuid">UUID of the application from which messages are sent.</param>
            <param name="topic">The topic to be unsubscribed from.</param>
            <param name="listener">
                The listener that will be removed and no longer passed messages on the topic.
            </param>
        </member>
        <member name="M:Openfin.Desktop.InterApplicationBus.unsubscribe(System.String,System.String,System.String,Openfin.Desktop.InterAppMessageHandler)">
            <summary>
                Unsubscribes to messages on the specified topic from the specified application and window.
            </summary>
            <param name="senderUuid">UUID of the application from which messages are sent.</param>
            <param name="sourceWindowName">The name of the window from which messages are sent.</param>
            <param name="topic">The topic to be unsubscribed from.</param>
            <param name="listener">
                The listener that will be removed and no longer passed messages on the topic.
            </param>
        </member>
        <member name="T:Openfin.Desktop.IOpenfinEntity">
            <summary>
            Defines the interface for an Openfin entity.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.IOpenfinEntity.Runtime">
            <summary>
            The runtime instance to which the entity belongs.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.IOpenfinEntity.Uuid">
            <summary>
            The UUID of the Openfin Application.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.IOpenfinEntity.Name">
            <summary>
            The name of the Openfin Window.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.AnalyticsOptions">
            <summary>
            A class representing customizable options for Openfin analytics
            </summary>
        </member>
        <member name="M:Openfin.Desktop.AnalyticsOptions.#ctor(System.Guid,Openfin.Desktop.AnalyticsOptions.AnalyticsHashOptions,Openfin.Desktop.AnalyticsOptions.AnalyticsServices)">
            <summary>
            Creates a customized Openfin analytics configuration using the specified activation key,
            client hash options, and selected services to report.
            </summary>
            <param name="key">The GUID activation key to enable analytics customization</param>
            <param name="hashOptions">The client information which is used when reporting an Openfin analytics event</param>
            <param name="services">The set of services which are reported to Openfin analytics</param>
        </member>
        <member name="T:Openfin.Desktop.AnalyticsOptions.AnalyticsHashOptions">
            <summary>
            Specifies which client information which will be hashed before reporting an analytics event
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsHashOptions.None">
            <summary>
            No client information will be hashed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsHashOptions.User">
            <summary>
            System user name will be hashed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsHashOptions.Manifest">
            <summary>
            Openfin application manifest path will be hashed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsHashOptions.Domain">
            <summary>
            System domain will be hashed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsHashOptions.All">
            <summary>
            All client information will be hashed.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.AnalyticsOptions.AnalyticsServices">
            <summary>
            Specifies the services which will be reported by the Openfin analytics
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.None">
            <summary>
            No configurable events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.ApplicationEvent">
            <summary>
            Application start, close, and crash events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.InstallApplication">
            <summary>
            Application installation events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.InstallRuntime">
            <summary>
            Runtime installation events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.InstallRvm">
            <summary>
            RVM installation events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.LaunchApplication">
            <summary>
            Application launch events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.UninstallApplication">
            <summary>
            Application uninstall events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.UninstallRuntime">
            <summary>
            Runtime uninstall events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.AnalyticsOptions.AnalyticsServices.All">
            <summary>
            All configuratble events will be reported to Openfin analytics.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AnalyticsOptions.Key">
            <summary>
            The GUID activation key to enable analytics customization
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AnalyticsOptions.HashOptions">
            <summary>
            The client information which is used when reporting an Openfin analytics event
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AnalyticsOptions.EnabledServices">
            <summary>
            The set of services which are reported to Openfin analytics
            </summary>
        </member>
        <member name="T:Openfin.Desktop.AnimationOptions">
            <summary>
                A class representing the options for a Window animation.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.AnimationOptions.#ctor(System.Boolean)">
            <summary>
                Constructs an instance with the passed value for property Interrupt
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AnimationOptions.Raw">
            <summary>
                The Raw property represents the name for the window which 
                must be unique within the context of the invoking Application.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The Raw property gets the value of the underlying JObject.
            </value> 
        </member>
        <member name="P:Openfin.Desktop.AnimationOptions.Interrupt">
            <summary>
                The Interrupt property represents a flag which determines if a call to Window.animate 
                will interrupt all pending transitions, or add itself to the queue.
                <para>Default: true</para>
            </summary> 
            <value>
                The Interrupt property gets/sets the value of the underlying 
                JObject field, "interrupt".
            </value> 
        </member>
        <member name="T:Openfin.Desktop.IAnimationTransition">
            <summary>
                A base class representing a transition of the window.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.IAnimationTransition.Raw">
            <summary>
                The Raw property represents the underliying 
                JObject containing the transition's settings.
            </summary> 
            <value>
                The Raw property gets/sets the value of the underlying JObject.
            </value> 
        </member>
        <member name="T:Openfin.Desktop.OpacityTransition">
            <summary>
                A class representing a transition of a Window's opacity.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.OpacityTransition.Opacity">
            <summary>
                The Opacity property represents the resulting opacity of the window.
                <para>This value is clamped beween 0.0 and 1.0</para>
                <para>Default: 1.0</para>
            </summary> 
            <value>
                The Opacity property gets/sets the value of the underlying 
                JObject field, "opacity".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.OpacityTransition.Duration">
            <summary>
                The Duration property represents the total time in milliseconds
                for the transition to complete.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Duration property gets/sets the value of the underlying 
                JObject field, "duration".
            </value>
        </member>
        <member name="M:Openfin.Desktop.OpacityTransition.#ctor">
            <summary>
                Constructs an empty instance.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.OpacityTransition.#ctor(System.Double,System.Int32)">
            <summary>
                Constructs an instance setting all the properties.
            </summary>
            <param name="opacity">The resulting opacity of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="T:Openfin.Desktop.SizeTransition">
            <summary>
                A class representing a transition of a Window's dimensions.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.SizeTransition.Width">
            <summary>
                The Width property represents the resulting width of the window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Width property gets/sets the value of the underlying 
                JObject field, "width".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.SizeTransition.Height">
            <summary>
                The Height property represents the resulting height of the window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Height property gets/sets the value of the underlying 
                JObject field, "height".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.SizeTransition.Duration">
            <summary>
                The Duration property represents the total time in milliseconds
                for the transition to complete.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Duration property gets/sets the value of the underlying 
                JObject field, "duration".
            </value>
        </member>
        <member name="M:Openfin.Desktop.SizeTransition.#ctor">
            <summary>
                Constructs an empty instance.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.SizeTransition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs an instance setting all the properties.
            </summary>
            <param name="width">The resulting width of the window.</param>
            <param name="height">The resulting height of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="M:Openfin.Desktop.SizeTransition.onlyWidth(System.Int32,System.Int32)">
            <summary>
                Constructs an instance that only transitions the Window's width.
            </summary>
            <param name="width">The resulting width of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="M:Openfin.Desktop.SizeTransition.onlyHeight(System.Int32,System.Int32)">
            <summary>
                Constructs an instance that only transitions the Window's height.
            </summary>
            <param name="height">The resulting height of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="T:Openfin.Desktop.PositionTransition">
            <summary>
                A class representing a transition of a Window's position.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.PositionTransition.Left">
            <summary>
                The Left property represents the resulting left position of the window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Left property gets/sets the value of the underlying 
                JObject field, "left".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.PositionTransition.Top">
            <summary>
                The Top property represents the resulting top position of the window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Top property gets/sets the value of the underlying 
                JObject field, "top".
            </value>
        </member>
        <member name="P:Openfin.Desktop.PositionTransition.Duration">
            <summary>
                The Duration property represents the total time in milliseconds
                for the transition to complete.
                <para>Default: 0</para>
            </summary> 
            <value>
                The Duration property gets/sets the value of the underlying 
                JObject field, "duration".
            </value>
        </member>
        <member name="M:Openfin.Desktop.PositionTransition.#ctor">
            <summary>
                Constructs an empty instance.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.PositionTransition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs an instance setting all the properties.
            </summary>
            <param name="left">The resulting left position of the window.</param>
            <param name="top">The resulting top position of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="M:Openfin.Desktop.PositionTransition.onlyLeft(System.Int32,System.Int32)">
            <summary>
                Constructs an instance that only transitions the Window's left position.
            </summary>
            <param name="left">The resulting left position of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="M:Openfin.Desktop.PositionTransition.onlyTop(System.Int32,System.Int32)">
            <summary>
                Constructs an instance that only transitions the Window's top position.
            </summary>
            <param name="top">The resulting top position of the window.</param>
            <param name="duration">
                The total time in milliseconds for the transition to complete.
            </param>
        </member>
        <member name="T:Openfin.Desktop.AnimationTransitions">
            <summary>
                A class representing a collection of transitions for a Window animation.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.AnimationTransitions.isTransitionEmpty(Openfin.Desktop.IAnimationTransition)">
            <summary>
                Helper utility for determining if an underliying transition contains configured data.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.AnimationTransitions.ToJObject">
            <summary>
                Returns all the underliying transitions as one JObject.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.AnimationTransitions.Opacity">
            <summary>
                The Opacity property represents a transition of the Window's opacity.
            </summary> 
            <value>
                The Opacity property gets/sets the value of the internal OpacityTransition. 
            </value> 
        </member>
        <member name="P:Openfin.Desktop.AnimationTransitions.Size">
            <summary>
                The Size property represents a transition of the Window's dimensions.
            </summary> 
            <value>
                The Size property gets/sets the value of the internal SizeTransition. 
            </value> 
        </member>
        <member name="P:Openfin.Desktop.AnimationTransitions.Position">
            <summary>
                The Position property represents a transition of the Window's position.
            </summary> 
            <value>
                The Position property gets/sets the value of the internal PositionTransition. 
            </value> 
        </member>
        <member name="T:Openfin.Desktop.Application">
            <summary>
                An object representing the Application.
                <para>
                    Allows the developer to execute, show and close an application, 
                    as well as show and hide an icon on Desktop. Also provides access 
                    to the Window object for the main application window to control 
                    window state such as the ability to minimize, maximize, restore, etc.
                </para>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Application.#ctor(Openfin.Desktop.ApplicationOptions,Openfin.Desktop.DesktopConnection,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Application Constructor.
            </summary>
            <param name="options">Settings of the application.<see cref="T:Openfin.Desktop.ApplicationOptions"/></param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="P:Openfin.Desktop.Application.DesktopConnection"/></param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.#ctor(System.String,Openfin.Desktop.DesktopConnection)">
            <summary>
                Attaches an Application object to an application that already exists.
                <seealso cref="M:Openfin.Desktop.Application.wrap(System.String,Openfin.Desktop.DesktopConnection)"/>
            </summary>
            <param name="uuid"> The UUID of the Application to wrap.</param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="P:Openfin.Desktop.Application.DesktopConnection"/></param>
        </member>
        <member name="E:Openfin.Desktop.Application.WindowShowRequested">
            <summary>
            Occurs when a window is requesting to be shown.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.WindowAlertRequested">
            <summary>
            Occurs when a window is requesting to show an alert.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.Closed">
            <summary>
            Occurs when the application is closed.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.Connected">
            <summary>
            Occurs when the application has authenticated and is connected.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.Initialized">
            <summary>
            Occurs when the application main window has initialized.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.Crashed">
            <summary>
            Occurs when the application crashes.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.Error">
            <summary>
            Occurs when the application has an error.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.NotResponding">
            <summary>
            Occurs when the application is not responding.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.OutOfMemory">
            <summary>
            Occurs when the application is out of memory.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.Responding">
            <summary>
            Occurs when the application is responding following a not responding event.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.Started">
            <summary>
            Occurs when the application has started.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.RunRequested">
            <summary>
            Occurs when the application has been requested to run.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.WindowNavigationRejected">
            <summary>
            Occurs when the application main window navigation was rejected.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.WindowCreated">
            <summary>
            Occurs when the application has created a window.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.WindowClosed">
            <summary>
            Occurs when the application has closed a window.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.WindowAuthenticationRequested">
            <summary>
            Occurs when a window has requested authentication credentials.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.WindowNotResponding">
            <summary>
            Occurs when a window is not responding.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Application.WindowResponding">
            <summary>
            Occurs when a window is responding following a not responding event.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Application.initialize">
            <summary>
                Allocates and prepares internal JObjects and wraps the Applications main window.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Application.wrap(System.String,Openfin.Desktop.DesktopConnection)">
            <summary>
                Attaches an Application object to an application that already exists.
            </summary>
            <param name="uuid"> The UUID of the Application to wrap.</param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="P:Openfin.Desktop.Application.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.Application.WrapWindow(System.String)">
            <summary>
            Wraps an existing window using the specified name.
            </summary>
            <param name="name">The name of the window that is being wrapped.</param>
            <returns>The wrapped window.</returns>
        </member>
        <member name="M:Openfin.Desktop.Application.getOptions">
            <returns>
                The ApplicationOptions object for the application
                <see cref="T:Openfin.Desktop.ApplicationOptions"/>
            </returns>
        </member>
        <member name="M:Openfin.Desktop.Application.getUuid">
            <returns>
                The applications registered UUID with the AppDesktop.
            </returns>
        </member>
        <member name="P:Openfin.Desktop.Application.DesktopConnection">
            <returns>
                The applications connection object with the AppDesktop.
                <see cref="P:Openfin.Desktop.Application.DesktopConnection"/>
            </returns>
        </member>
        <member name="P:Openfin.Desktop.Application.Runtime">
            <summary>
            Gets the Runtime that created the Application.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Application.Uuid">
            <summary>
            Gets the UUID of the Application.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Application.addEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <param name="type">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.close(System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Closes the application
            </summary>
            <param name="force">
                When true the close can not be prevented through the window event 'close-requested'
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.getChildWindows(Openfin.Desktop.childWindowHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Passes a list of wrapped child windows for the current application to childHandler.
            </summary>
            <remarks>
                The Application's main window IS NOT a child window.
                The list is empty if the application has no child windows.
            </remarks>
            <param name="childHandler">
                A delegate that receives a list wrapped child windows for the current application.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.getGroups(Openfin.Desktop.applicationGroupsHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Passes a list of groups and their wrapped child windows 
                for the current application to groupHandler.
            </summary>
            <param name="groupHandler">
                 A delegate that receives a list of groups for the current application. 
                 Each group is represented as a list of wrapped child windows.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.getManifest(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the JSON manifest that was used to create the application.
                Invokes the error callback if the application was not created from a manifest.
            </summary>
            <param name="callback">
                A function that is called and passed an Ack containing the JObject manifest 
                that was used to create the application.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.getWindow">
            <returns>
                The main Window object of the application.
                <see cref="T:Openfin.Desktop.Window"/>
            </returns>
        </member>
        <member name="M:Openfin.Desktop.Application.isRunning(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Determines if the application is currently running/active.
            </summary>
            <param name="callback">
                A function that is called if the method succeeds and 
                passed an object containg the running/active state of the window.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.pingChildWindow(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Pings a child window
            </summary>
            <param name="name">The name of the window to ping.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.createChildWindow(Openfin.Desktop.WindowOptions,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Create a child window
            </summary>
            <param name="windowOptions">WindowOptions object for the requested child window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.removeEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a previously registered event listener from the specified event.
                <para>
                    The listener is passed an event object containing information 
                    related to the event.
                </para>
            </summary>
            <remarks>
                Supported system event types are:
                   closed
                   crashed
                   error
                   not-responding
                   out-of-memory
                   responding
                   started
            </remarks>
            <param name="type">The type of the event.</param>
            <param name="listener">
                A function that was called whenever an event of the specified type occurs.
                It is no longer called in response to an event of the passed type.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.restart(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Restart the application.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.run(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Runs the application on the AppDesktop.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.Run(System.Action)">
            <summary>
            Run the application if it is not already running and perform the specified action after the application is connected.
            </summary>
            <param name="onConnected">The action to perform after the application is connected.
            If the application was previously running, this Action will be invoked immediately.</param>
        </member>
        <member name="M:Openfin.Desktop.Application.terminate(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Terminates the application.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.waitFor(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Wait for the application if it is unresponsive.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Application.Dispose">
            <summary>
            Dispose the current application instance.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ApplicationAsset">
            <summary>
            Application Asset
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationAsset.SourceUrl">
            <summary>
            Source URL of the Asset.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationAsset.Alias">
            <summary>
            Asset Alias 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationAsset.Version">
            <summary>
            Asset Version 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationAsset.Arguments">
            <summary>
            Asset launch arguments 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationAsset.Target">
            <summary>
            Default executable to launch for this asset
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ContentNavigation">
            <summary>
            Represents Navigation rules. Allows blacklist/whitelist lists to be applied on Navigation. Navigation failures will raise a window-navigation-rejected event. 
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ContentNavigation.#ctor">
            <summary>
            [Deprecated] Creates a ContentNavigation rule set with an empty Whitelist and Blacklist.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ContentNavigation.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a ContentNavigation rule set with the specified whitelist and blacklist sites.
            </summary>
            <param name="whitelist">The site list to allow.</param>
            <param name="blacklist">The site list to block.</param>
        </member>
        <member name="P:Openfin.Desktop.ContentNavigation.Blacklist">
            <summary>
            A list of URLs that navigation will be prevented.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ContentNavigation.Whitelist">
            <summary>
            A list of URLs or the "*" character that navigation will be allowed from, any url not on this list will be denied navigation. Overrides any rules specified in the blacklist list.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ContentNavigation.CreateBlacklist">
            <summary>
            Creates an empty blacklist with no whitelisted sites.
            </summary>
            <returns>A ContentNavigation rule set with an empty blacklist.</returns>
        </member>
        <member name="M:Openfin.Desktop.ContentNavigation.CreateBlacklist(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a blacklist using the specified sites.
            </summary>
            <param name="listItems">The site list to block.</param>
            <returns>A ContentNavigation rule set with the specified blacklisted items.</returns>
        </member>
        <member name="M:Openfin.Desktop.ContentNavigation.CreateBlacklist(System.String[])">
            <summary>
            Creates a blacklist using the specified sites.
            </summary>
            <param name="listItems">The site list to block.</param>
            <returns>A ContentNavigation rule set with the specified blacklisted items.</returns>
        </member>
        <member name="M:Openfin.Desktop.ContentNavigation.CreateWhitelist">
            <summary>
            Creates an empty whitelist with no blacklisted sites.
            </summary>
            <returns>A ContentNavigation rule set with an empty whitelist.</returns>
        </member>
        <member name="M:Openfin.Desktop.ContentNavigation.CreateWhitelist(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a whitelist using the specified sites.
            </summary>
            <param name="listItems">The site list to block.</param>
            <returns>A ContentNavigation rule set with the specified whitelisted items.</returns>
        </member>
        <member name="M:Openfin.Desktop.ContentNavigation.CreateWhitelist(System.String[])">
            <summary>
            Creates a whitelist using the specified sites.
            </summary>
            <param name="listItems">The site list to block.</param>
            <returns>A ContentNavigation rule set with the specified whitelisted items.</returns>
        </member>
        <member name="T:Openfin.Desktop.RuntimeAsset">
            <summary>
            Runtime Asset
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeAsset.SourceUrl">
            <summary>
            Source URL of the Asset.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeAsset.Version">
            <summary>
            Asset Version 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeAsset.Destination">
            <summary>
            Relative path for the OpenFin Runtime to install this asset to
            </summary>
        </member>
        <member name="T:Openfin.Desktop.RuntimeConnectOptions">
            <summary>
            Advanced settings to configure how the adapter manages and connects to a runtime instance.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RuntimeConnectOptions.None">
            <summary>
            The adapter manages a cache of runtime instances and launches the runtime with the RVM.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RuntimeConnectOptions.Default">
            <summary>
            The adapter manages a cache of runtime instances and launches the runtime with the RVM.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RuntimeConnectOptions.Unmanaged">
            <summary>
            Disables static caching the requested runtime instance.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RuntimeConnectOptions.DirectLaunch">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RuntimeConnectOptions.UseExternal">
            <summary>
            Creates a runtime instance which will connect to an externally launched version of the runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RuntimeConnectOptions.NonPersistent">
            <summary>
            Automatically disconnect the adapter from the runtime when the last application or persistent connection closes.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.RvmCacheMode">
            <summary>
            Customizable attributes used to identify the application to the RVM for automatic runtime management and cleanup
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.None">
            <summary>
            The application will generate a random ID every time it asks for a runtime version.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.ApplicationGuid">
            <summary>
            The entry assembly GUID will be included in the identification hash to the runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.ProductName">
            <summary>
            The entry assembly product name will be included in the identificaiton hash to the runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.ProductVersion">
            <summary>
            The entry assembly product version number will be included in the identificaiton hash to the runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.CompanyName">
            <summary>
            The entry assembly company name will be included in the identificaiton hash to the runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.RuntimeVersion">
            <summary>
            The requested OpenFin runtime version will be included in the identificaiton hash to the runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.ApplicationAssemblyName">
            <summary>
            The entry assembly file name  will be included in the identificaiton hash to the runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.ApplicationDateModified">
            <summary>
            The entry assembly date modified file attribute will be included in the identifcation hash to the runtime.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.RvmCacheMode.Default">
            <summary>
            The entry assembly product name, product version, company name, and the requested runtime version
            will be included in the identification hash to the runtime.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.PortDiscoveryMode">
            <summary>
            Port Discovery protocol
            </summary>
        </member>
        <member name="F:Openfin.Desktop.PortDiscoveryMode.None">
            <summary>
            No port discovery protocol to be used.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.PortDiscoveryMode.WindowClass">
            <summary>
            Window Class port discovery protocol.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.PortDiscoveryMode.NamedPipes">
            <summary>
            Named Pipes port discovery protocol
            </summary>
        </member>
        <member name="F:Openfin.Desktop.PortDiscoveryMode.Default">
            <summary>
            Defaults, all port discovery protocols are included.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ApplicationOptions">
            <summary>
                Helper object that provides getters/setters for the 
                various options needed for creating an Application.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ApplicationOptions.#ctor(System.String,System.String,System.String)">
            <summary>
                Constructs an instance configuring a new underlying JObject 
                with the passed values.
            </summary>
            <param name="name">The name of the application.</param>
            <param name="uuid">The UUID of the application</param>
            <param name="url">The url for the application to load.</param>
        </member>
        <member name="M:Openfin.Desktop.ApplicationOptions.getJsonCopy">
            <summary>
                Gets all settings in JObject format.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.Name">
            <summary>
                The Name property represents the the name for the Application's
                main window window which must be unique within the context of 
                the invoking Application.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The Name property gets the value of the underlying 
                JObject field, "name".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.UUID">
            <summary>
                The UUID property represents the UUID of the application 
                as known by the AppDesktop.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The UUID property gets the value of the underlying 
                JObject field, "uuid".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.ApplicationIcon">
            <summary>
                The ApplicationIcon property represents the icon to display for the 
                Application's main window.
                <para>
                    Support formats: 
                        Portable Network Graphic (PNG); Size: 256 x 256 
                </para>
                <para>Default: An null string</para>
            </summary> 
            <value>
                The ApplicationIcon property gets/sets the value of the underlying 
                JObject field, "applicationIcon".
            </value>
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.MainWindowOptions">
            <summary>
                The MainWindowOptions property represents the options 
                of the main window of the application.
            </summary> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.NonPersistent">
            <summary>
            Determines if this Application should keep the runtime up in the event of all other connections failing.
            </summary>
            <value>
            True will allow the runtime to close if this Application is the only open connection.
            False will allow the runtime to treat this Application as any other application running in the runtime.
            </value>
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.ContentNavigationRules">
            <summary>
            Navigation rules used by this application.
            <para>Default: No application rules, Application will be allowed to navigate to any URL.</para>
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.SupressWindowAlerts">
            <summary>
            Determines if Alert boxes from any window within the application are suppresed, if supressed you will need to handle WindowAlertRequested events to obtain the information.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.IsAdmin">
            <summary>
                The IsAdmin property represents if the application has 
                administrator privileges. (e.g., the ability to create 
                and run applications). 
                <para>Default: false</para>
            </summary> 
            <value>
                The IsAdmin property gets/sets the value of the underlying 
                JObject field, "isAdmin".
            </value>
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.Version">
            <summary>
                The Version property represents the version 
                of the application.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The Version property gets/sets the value of the underlying 
                JObject field, "version".
            </value> 
        </member>
        <member name="P:Openfin.Desktop.ApplicationOptions.BrowserPluginsEnabled">
            <summary>
            Enables PPAPI plugins (Flash) for this application.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ManifestUtils.ConvertPathToUriString(System.String)">
            <summary>
            Normalizes a string to a valid system path string. Returns an empty string when path is empty and null when path is null.
            </summary>
            <param name="path">Can be a relative or absolute path</param>
        </member>
        <member name="T:Openfin.Desktop.InstallDialogOptions">
            <summary>
            Represents the RVM options that can be used. 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.InstallDialogOptions.LogoPath">
            <summary>
            Relative Path or URL of the logo or image in the Download screen. Should be semi-transparent PNG. 100×25 pixels
            </summary>
        </member>
        <member name="P:Openfin.Desktop.InstallDialogOptions.LogoUrl">
            <summary>
            Absolute URL of the logo or image in the Download screen. Should be semi-transparent PNG. 100×25 pixels
            </summary>
        </member>
        <member name="P:Openfin.Desktop.InstallDialogOptions.BackgroundColor">
            <summary>
            Determines the color of the dialog. Color value is a int representation of a 32 bit number (A,R,G,B). For instance : 4278255360 is fully opaque green.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.InstallDialogOptions.TextColor">
            <summary>
            Determines the color of the text displayed above the progress bar location. Color value is a int representation of a 32 bit number (A,R,G,B). For instance : 4278255360 is fully opaque green.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.InstallDialogOptions.ProgressBarBackgroundColor">
            <summary>
            Determines the background color of the area where the progress bar is displayed. Color value is a int representation of a 32 bit number (A,R,G,B). For instance : 4278255360 is fully opaque green.
            </summary>  
        </member>
        <member name="P:Openfin.Desktop.InstallDialogOptions.ProgressBarFillColor">
            <summary>
            Determines the color of the progress bar. Color value is a int representation of a 32 bit number (A,R,G,B). For instance : 4278255360 is fully opaque green.
            </summary>  
        </member>
        <member name="P:Openfin.Desktop.InstallDialogOptions.ProgressBarBorderColor">
            <summary>
            Determines the border color of the progress bar.
            </summary>  
        </member>
        <member name="T:Openfin.Desktop.Logging.LogConfig">
            <summary>
            A class representing the configuration options of the Openfin .NET Adapter logger.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Logging.LogConfig.TargetFile">
            <summary>
            Gets or sets the path to the log file.
            </summary>
            <remarks>
            By default, log files will occur in the subdirectory OpenFin\Logs of the user LocalAppData directory.
            To specify a different directory, set this property with an absolute path.
            </remarks>
        </member>
        <member name="P:Openfin.Desktop.Logging.LogConfig.Enabled">
            <summary>
            Gets or sets if writing to a log file is enabled.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Logging.LogConfig.MinLevel">
            <summary>
            Gets or sets the minimum logging level to write to the log.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Logging.LogConfig.ToConsole">
            <summary>
            Gets or sets whether log statements should be directed to the current console.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Logging.Logger">
            <summary>
            Class representing a basic logger for file and console logging.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Logging.Logger.Info(System.Object)">
            <summary>
            Log a message at the Info trace level.
            </summary>
            <param name="value">The message object.</param>
        </member>
        <member name="M:Openfin.Desktop.Logging.Logger.Info(System.String)">
            <summary>
            Log a message at the Info trace level.
            </summary>
            <param name="value">The message string.</param>
        </member>
        <member name="M:Openfin.Desktop.Logging.Logger.Info(System.String,System.Object[])">
            <summary>
            Log a message at the Info trace level.
            </summary>
            <param name="value">The message format string.</param>
            <param name="args">An object array containing zero or more message objects to format.</param>
        </member>
        <member name="M:Openfin.Desktop.Logging.Logger.Trace(System.Object)">
            <summary>
            Log a message at the Info trace level.
            </summary>
            <param name="value">The message object.</param>
        </member>
        <member name="M:Openfin.Desktop.Logging.Logger.Trace(System.String)">
            <summary>
            Log a message at the Info trace level.
            </summary>
            <param name="value">The message string.</param>
        </member>
        <member name="M:Openfin.Desktop.Logging.Logger.Trace(System.String,System.Object[])">
            <summary>
            Log a message at the Trace trace level.
            </summary>
            <param name="value">The message format string.</param>
            <param name="args">An object array containing zero or more message objects to format.</param>
        </member>
        <member name="M:Openfin.Desktop.Logging.Logger.Dispose">
            <summary>
            Disposes the current Logger instance.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Logging.LogManager">
            <summary>
            Class used to access logger instances.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Logging.LogManager.GetCurrentLogger">
            <summary>
            Gets or creates a new shared logger instance.
            </summary>
            <returns>The logger instance.</returns>
        </member>
        <member name="T:Openfin.Desktop.OpenFinMessageEventArgs">
            <summary>
            Provides data for a sent or received message to the OpenFin Runtime.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.OpenFinMessageEventArgs.MessageContent">
            <summary>
            Gets or sets the string message content from the Runtime.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.RVMOptions">
            <summary>
            Represents the RVM options that can be used. 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RVMOptions.NoUI">
            <summary>
            Suppress all of the visuals in the RVM. This includes progress dialog, error report dialog, message boxes.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RVMOptions.DisableAutoUpdates">
            <summary>
            Updates are not checked for or downloaded.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RVMOptions.DoNotLaunch">
            <summary>
            Perform all of the startup sequence steps but do not launch the app (ideal for silent installs).
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RVMOptions.InstallDirectory">
            <summary>
            Specifies to the adapter where the RVM should be located on the local system. If RVM cannot be found
            it will automatically be downloaded based on the current runtime assets path.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RVMOptions.WorkingDirectory">
            <summary>
            Specifies the working directory the RVM will use to access and download Runtime files. If none is specified,
            the RVM InstallDirectory will be used.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.RuntimeOptions">
            <summary>
            A class representing the Runtime options that can be used. 
            </summary>
        </member>
        <member name="M:Openfin.Desktop.RuntimeOptions.#ctor">
            <summary>
            RuntimeOptions Constructor, will default all options.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.Version">
            <summary>
            Requested Runtime Version to connect to, defaults to "7.*"
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.SecurityRealm">
            <summary>
            Security Realm
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.Arguments">
            <summary>
            Arguments to be passed to the Runtime
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.InstallDialogOptions">
            <summary>
            Enables the customization of the install dialog
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.AnalyticsOptions">
            <summary>
            Advanced settings for application analytics
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.LicenseKey">
            <summary>
            The per-customer or per-contract licensing identifier for the RVM
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.EnableRemoteDevTools">
            <summary>
            Enables the chrome remote dev tools
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.RemoteDevToolsPort">
            <summary>
            Specifies a port for the remote dev tools
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.LrsUrl">
            <summary>
            Root URL for the License Relay Server (LRS).
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.ApplicationAssets">
            <summary>
            Application co-deployed assets
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.StartupApplicationOptions">
            <summary>
            Gets or sets the application options for the application which is created and run when calling <see cref="M:Openfin.Desktop.Runtime.ConnectAndRun(System.Action)"/>. 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.Host">
            <summary>
            Requested Runtime defaults to 127.0.0.1
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.Port">
            <summary>
            Requested Runtime port number, only used when PortDiscovery is disabled.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.AssetsPath">
            <summary>
            Absolute path, relative path, or URL of the root directory containing Runtime assets.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.AssetsUrl">
            <summary>
            Absolute URL of the root directory containing Runtime assets, as defined by AssetsPath
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.OfflineAccess">
            <summary>
            Gets or sets a value indicating whether Offline Applications are supported
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.Shortcuts">
            <summary>
            Gets a collection of Shortcut entries to install on the local machine
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.SplashScreenImagePath">
            <summary>
            Gets or sets the absolute path, relative path, or URL of the splash screen image to show during application load.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.SplashScreenImageUrl">
            <summary>
            Gets the absolute URL of the splash screen image to show during application load as defined by SplashScreenImagePath.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.SupportInformation">
            <summary>
            Gets or sets the SupportInformation definition to display to users when the RVM experiences errors.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.LocalRVMLocation">
            <summary>
            Location of the RVM on this current machine, defaults to embedded RVM, if not found will download.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.UUID">
            <summary>
            Connection UUID.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.RVMConfigPath">
            <summary>
            Relative Path or URL to the RVMConfig, will be ignored if a RVMOptions object is passed.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.RvmCacheMode">
            <summary>
            Application attributes used to identify the applicaction to the RVM for runtime reference counting 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.RVMOptions">
            <summary>
            The RVM Options to be used.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.RuntimeAssets">
            <summary>
            Runtime co-deployed assets 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.ConfigBasePath">
            <summary>
            Base path for all the writtable configuration files, rvm.json, null.json
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.PortDiscoveryMode">
            <summary>
            Determines Port discovery methods to be used. Defaults to all available.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.RuntimeConnectOptions">
            <summary>
            Advanced settings to configure how the adapter manages and connects to a runtime instance.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.RuntimeOptions.RuntimeConnectTimeout">
            <summary>
            Duration of time, in milliseconds, to wait for a successful connection to the runtime. Default is 10 seconds.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.RuntimeOptions.LoadDefault">
            <summary>
            Creates a default set of runtime options by searching for an appropriate application configuration file,
            or if none is found a default RuntimeOptions instance.
            </summary>
            <returns>The loaded RuntimeOptions object.</returns>
        </member>
        <member name="M:Openfin.Desktop.RuntimeOptions.LoadManifest(System.String)">
            <summary>
            Creates a RuntimeOptions object by loading an application manifest from a file path.
            </summary>
            <param name="path">The path to the manifest file.</param>
            <returns>The RuntimeOptions object as declared in the manifest file.</returns>
        </member>
        <member name="M:Openfin.Desktop.RuntimeOptions.LoadManifest(System.Uri)">
            <summary>
            Creates a RuntimeOptions object by loading an application manifest from a Uri.
            </summary>
            <param name="uri">The Uri to the manifest file.</param>
            <returns>The RuntimeOptions object as declared in the manifest file.</returns>
        </member>
        <member name="P:Openfin.Desktop.DesktopConnectionInternal.MessageTrace">
            <summary>
                The MessageTrace property controls additional console logging.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.sendAction(System.String,Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.runDesktop(System.String,System.String)">
            <summary>
            Starts the AppDesktop executable.
            </summary>
            <param name="desktopPath">The file path that the AppDesktop executable is located in.</param>
            <param name="commandLine">Command line arguments to start the AppDesktop with.</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.webSocketThreadMain">
                     * 
                     * ThreadStart for Websocket thread
                     * 
                    *
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.websocketOpened(System.Object,System.EventArgs)">
            <summary>
                EventHandler for open event from websocket.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.websocketError(System.Object,SuperSocket.ClientEngine.ErrorEventArgs)">
             
             EventHandler for Error event from websocket
             
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.websocketClosed(System.Object,System.EventArgs)">
             
             EventHandler for Close event from websocket
             
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.websocketMessageReceived(System.Object,WebSocket4Net.MessageReceivedEventArgs)">
             
             EventHandler for MessageReceived event from websocket
             
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.processExternalAppAction(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Delegates API control from the desktop to a derived instance of ExternalWindow
            </summary>
            <param name="payload">The data to process</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.Openfin#Desktop#IDesktopConnection#isConnected">
            <summary>
                Gets conneted status.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.respondToPing(System.Int64)">
             Responds to ping message from Desktop
            
             @param pingId unique ID of ping message
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.processExternalMessage(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Dispatches the a payload from "process-external-message" to all registered ExternalMessageHandlerDelegates
                and sends the result after all result handlers have set a success/fail result.
            </summary>
            <param name="payload">The data to process.</param>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnectionInternal.SendMessageToDesktopDelegate">
            <summary>
                Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory">
            <summary>
                Creates instances of ExternalMessageResultHandler and sends the total result to the AppDesktop.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory.ResultHandlerMetaInfo">
            <summary>
                Stores meta information for each ExternalMessageResultHandler
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory.ResultHandlerMetaInfo.#ctor">
            <summary>
                Defaults values used by this meta class
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory.#ctor(System.String,Openfin.Desktop.DesktopConnectionInternal.SendMessageToDesktopDelegate,Newtonsoft.Json.Linq.JObject)">
            <summary>
            
            </summary>
            <param name="uuid">
                The UUID of the DesktopConnection that owns this factory. Used for dispatching to the AppDesktop.
            </param>
            <param name="sendMessageToDesktop">
                Delegate for sending the success/fail result payload to the AppDesktop.
            </param>
            <param name="request">
                The payload from the AppDesktop.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory.wasSent">
            <summary>
                Returns true when the result has been sent to the desktop
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory.sendIfAllResultsDispatchedAndComplete">
            <summary>
                Sends the AND combination of all results and concatenated messages to the AppDesktop 
                if allDispatched() has been called and all result handlers have completed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory.allDispatched">
            <summary>
                Marks that no more result handlers will be created.
                Sends result status to the AppDesktop immediately if all result handlers have already set their success/fail and messages.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory.makeResultHandler">
            <summary>
                Factory method to create and track a result handler
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnectionInternal.ExternalMessageResultHandlerFactory.handleResult(System.String,System.Boolean,System.String)">
            <summary>
                Updates the stored meta information and sends to the container if all results have been received.
            </summary>
            <param name="id">The UUID of the ExternalMessageResultHandler the result came from</param>
            <param name="result">true for success, false for failure.</param>
            <param name="message">A string response to be sent back over HTTP/HTTPS</param>
        </member>
        <member name="T:Openfin.Desktop.DesktopConnection">
            <summary>
            An object for launching, connecting to, and controlling AppDesktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.#ctor(System.String,System.String,System.Int32,Openfin.Desktop.ExternalWindow)">
            <summary>
            Creates a new instance of DesktopConnection (obsolete) using the specified UUID, host, port, and external Window.
            </summary>
            <param name="uuid">The connection UUID.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port number to connect on.</param>
            <param name="externalWindow"></param>
        </member>
        <member name="P:Openfin.Desktop.DesktopConnection.MessageTrace">
            <summary>
            Gets or sets a value indicating whether or not all incoming and outgoing messages should be trace logged.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.DesktopConnection.Port">
            <summary>
            Gets the port number of the current websocket connection.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopConnection.Error">
            <summary>
            Occurs when an error is raised by the Openfin Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.addEventCallback(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <param name="subscriptionObject">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.addExternalMessageHandler(Openfin.Desktop.ExternalMessageHandlerDelegate,System.Object)">
            <summary>
                Registers a listener to handle messages for this connection's UUID originating via HTTPS/HTTP.
            </summary>
            <param name="listener">
                A function that is called to process a received HTTPS/HTTP message for this connection.
            </param>
            <param name="source">
                The object that originally registered the listener.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.connect(Openfin.Desktop.DesktopStateListener,System.String)">
            <summary>
                Connects to an AppDesktop processs
            </summary>
            
            <param name="listener">
                Receives updates on startup and connection state.
            </param>
            
            <param name="type">
                Describes the type of connection to establish.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.connectToVersion(Openfin.Desktop.RuntimeOptions,Openfin.Desktop.DesktopStateListener)">
            <summary>
            Connect to an instance of Desktop as specified in the supplied Runtime options.
            </summary>
            <param name="options">The RuntimeOptions object specifying the version to connect to.</param>
            <param name="listener">Listener object that receives updates on startup and connection state.</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.connectToVersion(System.String,Openfin.Desktop.DesktopStateListener,System.Boolean,System.Int32,System.String,System.String,System.String)">
            <summary>
            Connect to specified version of Desktop.  If the specified version is not running, it will try to start it.
            </summary>
            <param name="desktopVersion">desktopVersion version of Desktop required</param>
            <param name="listener">listener Receives updates on startup and connection state</param>
            <param name="enableRemoteDevTools">Will make the remote development tools available on the passed port</param>
            <param name="devToolsPort">remote development tools port that will be used</param>
            <param name="arguments">arguments passed to the runtime</param>
            <param name="rvmDownloadUrl">URL to download the RVM from, as a default will target OpenFin servers</param>
            <param name="rvmLocation">path to an existing OpenFinRVM.exe file that will be used to initiate the OpenFin connection</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.disconnect">
            <summary>
                Disconnects from AppDesktop
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.Dispose">
            <summary>
            Closes the DesktopConnection.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.exit">
            <summary>
                Notify AppDesktop to exit.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.getInterApplicationBus">
            <summary>
                Gets the Inter-Application message dispatcher associated with 
                this DesktopConnection.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.isConnected">
            <summary>
            Gets the current connection state of the DesktopConnection.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.joinWebSocketThread">
            <summary>
                Joins the thread that handles the Websocket communication.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.launchAndConnect(System.String,System.String,Openfin.Desktop.DesktopStateListener,System.Int32)">
            <summary>
                Launches AppDesktop and notifies the listener when connected.
            </summary>
            <param name="desktopPath">Absolute path to the AppDesktop executable
            </param>
            <param name="commandLineArguements">
                Command line arguments to start the AppDesktop with.
            </param>
            <param name="listener">
                Receives updates on startup and connection state.
            </param>
            <param name="timeout">
                For connecting to Desktop after launch. If the connection to 
                AppDesktop is not established by the timeout, in seconds, the listener 
                will get an onError() call.
            </param>
            
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onClosed">
            <summary>
                Callback when the connection with the Desktop has closed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onError(System.String)">
            <summary>
                Callback when client cannot start or connect to the Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onMessage(System.String)">
            <summary>
                Callback when a message is sent to this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onOutgoingMessage(System.String)">
            <summary>
                Callback when a message is sent from this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.onReady">
            <summary>
                Callback when Desktop is successfully connected and ready to 
                accept commands.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.removeEventCallback(Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Removes a previously registered event listener from the specified event.
                <para>
                    The listener is passed an event object containing information 
                    related to the event.
                </para>
            </summary>
            <param name="subscriptionObject">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that was called whenever an event of the specified type occurs.
                It is no longer called in response to an event of the passed type.
            </param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The object that originally registered the listener.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.sendAction(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.sendAction(System.String,Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">The callback to invoke upon completion.</param>
            <param name="source">The source object sending the action.</param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.sendAction(System.String,Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Sends a message to AppDesktop.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The message source to pair with resulting instances of AckCallback.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopConnection.sendActionToNotificationsCenter(System.String,Newtonsoft.Json.Linq.JObject,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Object)">
            <summary>
                Sends a message to an AppDesktop Notification.
            </summary>
            <param name="action">The action of the message.</param>
            <param name="payload">The message object to send.</param>
            <param name="callback">
                A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="source">
                The message source to pair with a resulting message instance of AckCallback.
            </param>
        </member>
        <member name="T:Openfin.Desktop.DesktopStateListener">
            <summary>
                A listener interface for receiving status updates from Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onReady">
            <summary>
                Callback when Desktop is successfully connected and ready to 
                accept commands.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onClosed">
            <summary>
                Callback when the connection with the Desktop has closed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onError(System.String)">
            <summary>
                Callback when client cannot start or connect to the Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onMessage(System.String)">
            <summary>
                Callback when a message is sent to this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopStateListener.onOutgoingMessage(System.String)">
            <summary>
                Callback when a message is sent from this client.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.DesktopUtils">
            <summary>
                Static helper class for getting/setting values from a JObject.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSON``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
                Generic function to retrieve a value identified by "key" from 
                "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONArray(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
                Returns a JArray identified by "key" from 
                "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve the JArray from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONString(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
                Returns a string identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONBool(Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
                Returns a bool identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONInt(Newtonsoft.Json.Linq.JObject,System.String,System.Int32)">
            <summary>
                Returns an int identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONLong(Newtonsoft.Json.Linq.JObject,System.String,System.Int64)">
            <summary>
                Returns a long identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONDouble(Newtonsoft.Json.Linq.JObject,System.String,System.Double)">
            <summary>
                Returns a double identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getJSONObject(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
                Returns a JObject identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.getObject(Newtonsoft.Json.Linq.JObject,System.String,System.Object)">
            <summary>
                Returns an Object identified by "key" from "jsonObject".
                <para>
                    "defaultValue" is returned if no match is found.
                </para>
                <param name="jsonObject">The JSON object to retrieve a value from.</param>
                <param name="key">The key to search for.</param>
                <param name="defaultValue">The value to return if no key match is found.</param>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopUtils.updateJSONValue(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
                Sets a key/value pair for the passed JObject.
            </summary>
            <param name="jsonObject">The JSON object to insert the pair into.</param>
            <param name="key">The key to identify the value.</param>
            <param name="value">The value stored and identified by key.</param>
        </member>
        <member name="T:Openfin.Desktop.IExternalMessageResultDispatcher">
            <summary>
                Interface for handling the result status and message from ExternalMessageResultHandler.send()
            </summary>
        </member>
        <member name="M:Openfin.Desktop.IExternalMessageResultDispatcher.handleResult(System.String,System.Boolean,System.String)">
            <summary>
                Invoked by ExternalMessageResultHandler.send()
            </summary>
            <param name="id">The UUID of the ExternalMessageResultHandler the result came from</param>
            <param name="result">true for success, false for failure.</param>
            <param name="message">A string response to be sent back over HTTP/HTTPS</param>
        </member>
        <member name="T:Openfin.Desktop.ExternalMessageResultHandler">
            <summary>
                Utility class to communicate results from calls to an ExternalMessageHandlerDelegate back to the AppDesktop.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalMessageResultHandler.ID">
            <summary>
                A unique identifier for every instance of ExternalMessageResultHandler.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalMessageResultHandler.Dispose">
            <summary>
                Will call send() if not done so already.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalMessageResultHandler.send(System.Boolean,System.String)">
            <summary>
                Record the result of an ExternalMessageHandlerDelegate to be sent back to the AppDesktop.
            </summary>
            <param name="result">true for success, false for failure.</param>
            <param name="message">A string response to be sent back over HTTP/HTTPS</param>
        </member>
        <member name="T:Openfin.Desktop.ExternalWindowObserver">
            <summary>
                Integrates a window outside of the desktop for interaction and control with the API.
            </summary>
            <remarks>
                An integrated window is controlled in the same way as an HTML window running in the desktop. 
                It can be controlled and queried by the API,
                generate events that are subscribed to by addEventListener, 
                and join/merge groups with other windows for docking.
            </remarks>
        </member>
        <member name="P:Openfin.Desktop.ExternalWindowObserver.UUID">
            <summary>
                The UUID property represents the UUID of 
                the application this window is a child of.
            </summary> 
        </member>
        <member name="P:Openfin.Desktop.ExternalWindowObserver.Name">
            <summary>
                The Name property represents the name for the window which 
                must be unique within the context of the invoking Application.
            </summary> 
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.#ctor(System.String,System.Int32,System.String,System.String,System.IntPtr)">
            <summary>
                Establishes a connection and registers 
                the window identified by hWnd with the desktop.
            </summary>
            <param name="host">The host that the desktop is running on.</param>
            <param name="port">The port that the desktop is listening on for connections.</param>
            <param name="parentAppUuid">The UUID of the application to create register this window as a child of.</param>
            <param name="name">The unique name for this window as a child window.</param>
            <param name="hWnd">The HWND of the window to control/observe.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.restoreWndProc">
            <summary>
                Resets the normal WndProc.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.cleanup">
            <summary>
                deregisters the window with the desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.Dispose">
            <summary>
                Ensures this window is deregistered on disposal.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.registerExternalWindow(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Notifies the desktop to track, control and observe events for this window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.deregisterExternalWindow(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Notifies the desktop to stop all integration with this window, and remove it from the app.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.sendExternalWindowEvent(Newtonsoft.Json.Linq.JObject)">
            <summary>
                Sends a serialized WM message as JSON to the desktop.
            </summary>
            <param name="payload">The serialized WM message</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.installMessageHandlers">
            <summary>
                Install delegates to send WM events to the desktop 
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onCaptureChanged(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_CAPTURECHANGED .
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_CAPTURECHANGED</param>
            <param name="wParam">
                This parameter is not used.
            </param>
            <param name="lParam">
                A handle to the window gaining the mouse capture.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onDestroyed(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_DESTROY.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_DESTROY</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onEnterSizeMove(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_ENTERSIZEMOVE.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_ENTERSIZEMOVE</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onExitSizeMove(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_EXITSIZEMOVE.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_EXITSIZEMOVE</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onKillFocus(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_KILLFOCUS.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_KILLFOCUS</param>
            <param name="wParam">A handle to the window that receives the keyboard focus. This parameter can be NULL.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onMove(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_MOVE.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_MOVE</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">
                The x and y coordinates of the upper-left corner 
                of the client area of the window. The low-order word 
                contains the x-coordinate while the high-order 
                word contains the y coordinate.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onMoving(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_MOVING.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_MOVING</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">
                A pointer to a RECT structure with the current 
                position of the window, in screen coordinates. 
                To change the position of the drag rectangle, 
                an application must change the members of 
                this structure.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onNcDoubleClick(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_NCLBUTTONDBLCLK.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_NCLBUTTONDBLCLK</param>
            <param name="wParam">
                The hit-test value returned by the DefWindowProc function 
                as a result of processing the WM_NCHITTEST message.
            </param>
            <param name="lParam">
                A POINTS structure that contains the x- and y-coordinates 
                of the cursor. The coordinates are relative to the upper-left 
                corner of the screen.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onSetFocus(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_SETFOCUS.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_SETFOCUS</param>
            <param name="wParam">
                A handle to the window that has lost the keyboard focus. 
                This parameter can be NULL.
            </param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onSizing(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_SIZING.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_SIZING</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">This parameter is not used.</param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onSysCommand(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_SYSCOMMAND.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_SYSCOMMAND</param>
            <param name="wParam">The type of system command requested.</param>
            <param name="lParam">
            
                The low-order word specifies the horizontal position of the cursor, 
                in screen coordinates, if a window menu command is chosen with the mouse. 
                Otherwise, this parameter is not used.
                
                The high-order word specifies the vertical position of the cursor, in s
                creen coordinates, if a window menu command is chosen with the mouse. 
                This parameter is –1 if the command is chosen using a 
                system accelerator, or zero if using a mnemonic.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onWindowPosChanged(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_WINDOWPOSCHANGED.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_WINDOWPOSCHANGED</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">
                A pointer to a WINDOWPOS structure that contains 
                information about the window's new size and position.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onWindowPosChanging(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
                Called in response to WM_WINDOWPOSCHANGING.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="msg">WM_WINDOWPOSCHANGING</param>
            <param name="wParam">This parameter is not used.</param>
            <param name="lParam">
                A pointer to a WINDOWPOS structure that contains 
                information about the window's new size and position.
            </param>
            <param name="handled">Will bypass the default WndProc when set to true.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onReady">
            <summary>
                Callback when Desktop is successfully connected and ready to 
                accept commands.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onClosed">
            <summary>
                Callback when the connection with the Desktop has closed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onError(System.String)">
            <summary>
                Callback when client cannot start or connect to the Desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onMessage(System.String)">
            <summary>
                Callback when a message is sent to this client.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowObserver.onOutgoingMessage(System.String)">
            <summary>
                Callback when a message is sent from this client.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ExternalWindowAckResult">
            <summary>
                Encapsulates and sends the result of an ExternalWindow action to the desktop.
                The result is sent after invocation of an ExternalWindow method.
                
                In cases where this behavior needs to be  prevented, such as when work done should be handled by another thread, 
                Set PreventAutomaticSend to true and call send() when the result state is determined.
                
                send() will be called automatically by Dispose() if it has not been explicitly called prior.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowAckResult.#ctor(Openfin.Desktop.DesktopConnection,System.Int64,System.String)">
            <summary>
                 Constructs an instance.
            </summary>
            <param name="connection"> The websocket connection that owns this ACK</param>
            <param name="correlationId">The message ID to map this result back to any pending callbacks in other apps.</param>
            <param name="destinationToken">Token which resolves to the app with the pending callback.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowAckResult.send(System.Boolean,System.String)">
            <summary>
                Sends the result to the desktop triggering pending callbacks in other apps.
            </summary>
            <param name="succeeded">True when the operation was successful</param>
            <param name="reason">When succeeded is false, a reason is sent on error.</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindowAckResult.Dispose">
            <summary>
                Will call send() if not done so already.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.ExternalWindowAckResult.PreventAutomaticSend">
            <summary>
                Prevents send() from being called directly after invocation of an ExternalWindow method. 
                If prevented send() must be called explicitly otherwise it will be called on Dispose().
            </summary>
        </member>
        <member name="T:Openfin.Desktop.ExternalWindow">
            <summary>
               Responds to API window messages to control a window outside of the desktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.blur(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Removes focus from the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.bringToFront(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Brings the window to the front of the window stack.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.close(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Closes the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.focus(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Gives focus to the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.hide(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Hides the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.maximize(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Maximizes the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.minimize(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Minimizes the window.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.moveBy(System.Int32,System.Int32,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Moves the window by a specified amount.
            </summary>
            <param name="deltaLeft">The change in the left position of the window.</param>
            <param name="deltaTop">The change in the top position of the window.</param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.moveTo(System.Int32,System.Int32,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Moves the window to a specified location.
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The top position of the window.</param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.resizeBy(System.Int32,System.Int32,System.String,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Resizes the window by the specified amount.
            </summary>
            <param name="deltaWidth">The change in the width of the window.</param>
            <param name="deltaHeight">The change in the height of the window.</param>
            <param name="anchor">
                Specifies a corner to remain fixed during the resize.
                Can take the values: 
                    "top-left"
                    "top-right"
                    "bottom-left"
                    "bottom-right" 
                If undefined, the default is "top-left".
            </param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.resizeTo(System.Int32,System.Int32,System.String,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Resizes the window to the specified dimensions.
            </summary>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="anchor">
                Specifies a corner to remain fixed during the resize.
                Can take the values: 
                    "top-left"
                    "top-right"
                    "bottom-left"
                    "bottom-right" 
                If undefined, the default is "top-left".
            </param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.restore(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Restores the window to its normal state (i.e., unminimized, unmaximized).
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.show(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Shows the window if it is hidden.
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.showAt(System.Int32,System.Int32,System.Boolean,Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Shows the window if it is hidden at the specified location.
                <para>
                    If the toggle parameter is set to true, the window will
                    alternate between showing and hiding.
                </para>
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The right position of the window.</param>
            <param name="toggle">
                If true, the window will alternate between showing and hiding in subsequent calls.
            </param>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="M:Openfin.Desktop.ExternalWindow.setAsForeground(Openfin.Desktop.ExternalWindowAckResult)">
            <summary>
                Set's the window as the foreground window. 
                <para>
                    The window is activated(focused) and brought to front.
                </para>
            </summary>
            <param name="result">Notifies the desktop of success/failure of this action</param>
        </member>
        <member name="T:Openfin.Desktop.LaunchExternalProcessResult">
            <summary>
                Encapsulates the result from a call to DesktopSystem.launchExternalProcess()
            </summary>
        </member>
        <member name="M:Openfin.Desktop.LaunchExternalProcessResult.#ctor(System.String)">
            <summary>
            Creates an instance of a LaunchExternalProcessResult with the specified process UUID.
            </summary>
            <param name="processUuid">The UUID assigned to the created process.</param>
        </member>
        <member name="P:Openfin.Desktop.LaunchExternalProcessResult.UUID">
            <summary>
                The UUID property represents the mapped UUID for a process launched by DesktopSystem.launchExternalProcess()
                <para>Default: An empty string</para>
            </summary> 
        </member>
        <member name="T:Openfin.Desktop.TerminateExternalProcessResult">
            <summary>
                Encapsulates the result from a call to DesktopSystem.terminateExternalProcess().
                The result of the close/terminate can be retrieved by the getter named "Result".
            </summary>
        </member>
        <member name="M:Openfin.Desktop.TerminateExternalProcessResult.#ctor">
            <summary>
            Creates a default instance of TerminateExternalProcessResult.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.TerminateExternalProcessResult.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of TerminateExternalProcessResult with the specified process UUID and result.
            </summary>
            <param name="processUuid">The UUID of the process launched by the Runtime.</param>
            <param name="result">The result of the process launch.</param>
        </member>
        <member name="P:Openfin.Desktop.TerminateExternalProcessResult.UUID">
            <summary>
                The UUID property represents the mapped UUID for a process launched by DesktopSystem.launchExternalProcess()
                <para>Default: An empty string</para>
            </summary> 
        </member>
        <member name="P:Openfin.Desktop.TerminateExternalProcessResult.Result">
            <summary>
                The Result property represents how a process termination was handleded.
                
                <para>"clean": The process was closed.</para>
                
                <para>"terminated": The was terminated.</para>
                
                <para>"failed": The close/terminate operation was unable to complete.</para>
            
            
            
                <para>Default: "failed"</para>
            </summary> 
        </member>
        <member name="T:Openfin.Desktop.DesktopSystem">
            <summary>
                An object representing the core of the OpenFin Desktop. Allows the developer to 
                perform system-level actions, such as accessing logs, viewing processes, clearing 
                the cache and exiting the Desktop.
                <para>
                    In order to use the System object, an application must have admin-level privileges 
                    (e.g., isAdmin must be set to true when in the options when the application is created). 
                </para>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.#ctor(Openfin.Desktop.DesktopConnection)">
            <summary>
                DesktopSystem Constructor.
            </summary>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.DesktopIconClicked">
            <summary>
            Occurs when the desktop icon is clicked when the application is already running.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.IdleStateChanged">
            <summary>
            Occurs when a user enters or returns from a system idle state.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.MonitorInfoChanged">
            <summary>
            Occurs when the desktop monitors size or location changes.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.SessionChanged">
            <summary>
            Occurs when the user desktop session changes state.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.ApplicationClosed">
            <summary>
            Occurs when an application is closed.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.ApplicationCrashed">
            <summary>
            Occurs when an application crashes.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.ApplicationCreated">
            <summary>
            Occurs when a new application has been created.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.ApplicationStarted">
            <summary>
            Occurs when an application has been started.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.ExternalApplicationConnected">
            <summary>
            Occurs when an external application has connected.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.DesktopSystem.ExternalApplicationDisconnected">
            <summary>
            Occurs when an external application has disconnected.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.addEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <param name="type">The type of the event.</param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.clearCache(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Clears cached data containing window state/positions, 
                application resource files (images, HTML, JavaScript files)
                cookies, and items stored in the Local Storage. 
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="cache">If true, clears chrome caches</param>
            <param name="cookies">If true, deletes all cookies.</param>
            <param name="appcache">If true, clear application caches.</param>
            <param name="localStorage">If true, clears local storage.</param>
            <param name="userData">If true, clears user data.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.deleteCacheOnRestart(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Clears all cached data when App Desktop is restarted. 
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.exit(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Exits App Desktop.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getAllApplications(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an array of data (uuid, running/active state) for all application windows. 
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                The object passed to callback takes the form:
                [
                    {
                        uuid: (string) uuid of the application,
                        isRunning: (bool) true when the application is running/active
                    },
                    ...
                ]
            </remarks>
            <param name="callback">
                A function that is called and passed an array containing the application UUIDs and running state.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getAllWindows(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an array of data (name, ids, bounds) for all application windows. 
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                The object passed to callback takes the form:
                [
                    {
                        uuid: (string) uuid of the application,
                        mainWindow: {
                            name: (string) name of the main window,
                            top: (integer) top-most coordinate of the main window,
                            right: (integer) right-most coordinate of the main window,
                            bottom: (integer) bottom-most coordinate of the main window,
                            left: (integer) left-most coordinate of the main window
                        },
                        childWindows: [{
                                name: (string) name of the child window,
                                top: (integer) top-most coordinate of the child window,
                                right: (integer) right-most coordinate of the child window,
                                bottom: (integer) bottom-most coordinate of the child window,
                                left: (integer) left-most coordinate of the child window
                            },
                            ...
                        ]
                    },
                    ...
                ]
            </remarks>
            <param name="callback">
                A function that is called and passed an array containing the window information.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getCommandLineArguments(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the command line argument string that started App Desktop.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called and passed the command 
                line arguments used to start App Desktop.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getConfig(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the App Desktop's configuration.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="section">Which section to return from the configuration.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getDeviceId(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets the UUID of the computer on which App Desktop is installed.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="callback">
                 A function that is called and passed a unique identifier of the device.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getEnvironmentVariable(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Expands an environment variable.
            </summary>
            <remarks>
                The resulting payload is an object mapping 
                the passed variable to its expanded value.
                
                Invalid/unknown environment variables are returned as value null
            </remarks>
            <param name="varToExpand">
                The variable to be expanded.
            </param>
            <param name="callback">
                 A function that is called and passed a unique identifier of the device.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getEnvironmentVariable(System.String[],Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Expands the passed environment variables.
            </summary>
            <remarks>
                The resulting payload is an object mapping 
                the passed variables to their expanded values.
                
                Invalid/unknown environment variables are returned as value null
            </remarks>
            <param name="varsToExpand">
                The variables to be expanded.
            </param>
            <param name="callback">
                 A function that is called and passed a unique identifier of the device.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getLog(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the contents of the log with the specified filename.
                <para>Requires administrator privileges.</para>
            </summary>
            <param name="fileName">The filename of the log.</param>
            <param name="callback">
                 A function that is called and passed the contents of the log.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getLogList(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an array of data objects for all available logs.
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                Each object in the returned array takes the form:
                 {
                     name: (string) the filename of the log,
                     size: (integer) the size of the log in bytes,
                     date: (integer) the unix time at which the log was created
                 }
            </remarks>
            <param name="callback">
                 A function that is called and passed an array of data objects for all available logs.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getMonitorInfo(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an object that contains data about the about the 
                monitor setup of the computer that App Desktop is running on.
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                The returned object takes the form:
                {
                    nonPrimaryMonitors: [{
                        availableRect: {
                            bottom: (integer) bottom-most available monitor coordinate,
                            left: (integer) left-most available monitor coordinate,
                            right: (integer) right-most available monitor coordinate,
                            top: (integer) top-most available monitor coordinate
                        },
                        deviceId: (string) device id of the display,
                        displayDeviceActive: (boolean) true if the display is active,
                        monitorRect: {
                            bottom: (integer) bottom-most monitor coordinate,
                            left: (integer) left-most monitor coordinate,
                            right: (integer) right-most monitor coordinate,
                            top: (integer) top-most monitor coordinate
                        },
                        name: (string) name of the display
                    },
                    ...
                    ],
                    primaryMonitor: {
                        availableRect: {
                            bottom: (integer) bottom-most available monitor coordinate,
                            left: (integer) left-most available monitor coordinate,
                            right: (integer) right-most available monitor coordinate,
                            top: (integer) top-most available monitor coordinate
                        },
                        deviceId: (string) device id of the display,
                        displayDeviceActive: (boolean) true if the display is active,
                        monitorRect: {
                            bottom: (integer) bottom-most monitor coordinate,
                            left: (integer) left-most monitor coordinate,
                            right: (integer) right-most monitor coordinate,
                            top: (integer) top-most monitor coordinate
                        },
                        name: (string) name of the display
                    },
                    reason: (string) always "api-query",
                    taskbar: {
                        edge: {string} which edge of a monitor the taskbar is on,
                        rect: {
                            bottom: ({integer} bottom-most coordinate of the taskbar),
                            left: ({integer} left-most coordinate of the taskbar),
                            right: ({integer} right-most coordinate of the taskbar),
                            top: ({integer} top-most coordinate of the taskbar)
                        }
                    },
                    virtualScreen: {
                        bottom: (integer) bottom-most coordinate of the virtual screen,
                        left: (integer) left-most coordinate of the virtual screen,
                        right: (integer) right-most coordinate of the virtual screen,
                        top: (integer) top-most coordinate of the virtual screen
                    }
                }
            </remarks>
            <param name="callback">
                A function that is called and passed an object containing monitor information
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getMousePosition(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Returns the mouse in virtual screen coordinates (left, top).
            </summary>
            <remarks>
                The returned object takes the form:
                {
                    top: (integer) the top position of the mouse in virtual screen
                                   coordinates,
                    left: (integer) the left position of the mouse in virtual screen
                                    coordinates
                }
            </remarks>
            <param name="callback">
                A function that is called and passed an object containing the position of the mouse.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getProcessList(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves an array of all App Desktop processes that are currently running.
                <para>
                    Each element in the array is an object containing the uuid 
                    and the name of the application to which the process belongs. 
                </para>
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                The returned object takes the form:
                [
                    {
                        cpuUsage: (decimal) the percentage of total CPU usage,
                        name: (string) the application name,
                        nonPagedPoolUsage: (integer) the current nonpaged pool usage in bytes,
                        pageFaultCount: (integer) the number of page faults,
                        pagedPoolUsage: (integer) the current paged pool usage in bytes,
                        pagefileUsage: (integer) the total amount of memory in bytes that the
                                                 memory manager has committed,
                        peakNonPagedPoolUsage: (integer) the peak nonpaged pool usage in bytes,
                        peakPagedPoolUsage: (integer) the peak paged pool usage in bytes,
                        peakPagefileUsage: (integer) the peak value in bytes of pagefileUsage
                                                     during the lifetime of this process,
                        peakWorkingSetSize: (integer) the peak working set size in bytes,
                        processId: (integer) the native process identifier,
                        uuid: (string) the application UUID,
                        workingSetSize: (integer) the current working set size
                                                  (both shared and private data) in bytes
                    },
                    ...
                ]
            </remarks>
            <param name="callback">
                A function that is called and passed the process list.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getProxySettings(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Retrieves the proxy settings object.
            </summary>
            <remarks>
                The proxy object the callback receives takes the following form:
                {
                    type: (string) "system" or "named",
                    proxyAddress: (string) the address of the proxy server,
                    proxyPort: (integer) the port of proxy server
                }
            </remarks>
            <param name="callback">
                A function that is called and passed the proxy settings object.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.getVersion(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Returns the version of App Desktop.
                <para>
                    The version contains the major, minor, build and revision numbers (e.g., "2.0.3.0").
                </para>
            </summary>
            <param name="callback">
                A function that is called and passed the App Desktop version.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.launchExternalProcess(System.String,System.String,System.String,Openfin.Desktop.launchExternalProcessHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Runs an executable or batch file.
            </summary>
            <param name="path">The path of the file to launch via the command line.</param>
            <param name="commandLine">The command line arguments to pass.</param>
            <param name="uuid">The requested UUID of the external application.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds. 
                Receives a LaunchExternalProcessResult containing the UUID mapping to the launched process.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.log(System.String,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Writes a message to the log.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="level">
                The log level for the entry. Can be either "info", "warning" or "error".
            </param>
            <param name="message">
                The log message text.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.openUrlWithBrowser(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Opens the passed URL
            </summary>
            <param name="url">The URL of the page to open.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.releaseExternalProcess(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes the process entry for the passed UUID obtained 
                from a previous call to DesktopSystem.launchExternalProcess().
            </summary>
            <param name="processUuid">The UUID for a process launched by DesktopSystem.launchExternalProcess()</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.removeEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a previously registered event listener from the specified event.
                <para>
                    The listener is passed an event object containing information 
                    related to the event.
                </para>
            </summary>
            <remarks>
                Supported system event types are:
                     desktop-icon-clicked
                     monitor-info-changed
            </remarks>
            <param name="type">The type of the event.</param>
            <param name="listener">
                A function that was called whenever an event of the specified type occurs.
                It is no longer called in response to an event of the passed type.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.setClipboard(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Copies text to the clipboard
            </summary>
            <param name="text">The text to copy</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.setCookie(System.String,System.String,System.String,System.UInt32,System.Boolean,System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Stores a cookie in the runtime.
            </summary>
            <param name="url">
                The URL that the cookie is for.
            </param>
            <param name="name">
                The key used to lookup the value.
            </param>
            <param name="value">
                The value paired with the key (name).
            </param>
            <param name="ttl">
                The time to till the cookie expires in milliseconds. 
                Never expires when set to 0.
                Defaults to 0.
            </param>
            <param name="secure">
                Accessible only on a secured connection (SSL)
            </param>
            <param name="httpOnly">
                Accessible only on HTTP/HTTPS.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.showDeveloperTools(System.String,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Shows Developer tool
            </summary>
            <param name="applicationUUID">The application ID</param>
            <param name="windowName">The name of dev tool window</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.terminateExternalProcess(System.String,System.UInt32,System.Boolean,Openfin.Desktop.terminateExternalProcessHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Attempts to cleanly close an external process and terminates it 
                if the close has not occured after the elapsed timeout in milliseconds.
            </summary>
            <param name="processUuid">The UUID for a process launched by DesktopSystem.launchExternalProcess()</param>
            <param name="timeout">The time in milliseconds to wait for a close to occur before terminating.</param>
            <param name="killTree">Explicitly terminates all child processes when true.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds. 
                The result of the operation is returned as a TerminateExternalProcessResult
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.updateProxySettings(System.String,System.String,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Updates the proxy settings.
                <para>Requires administrator privileges.</para>
            </summary>
            <remarks>
                the passed type can be either "system" or "named". 
                Use "system" to use the default system proxy settings. 
                Otherwise use "named" to specify the address and port 
                of the proxy server.
            </remarks>
            <param name="type">The type of proxy. </param>
            <param name="proxyAddress">
                The address of the proxy. Example: "example.yourproxyserver.com".
            </param>
            <param name="proxyPort">The port of the proxy server.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.DesktopSystem.Dispose">
            <summary>
            Disposes this instance of the DesktopSystem and unsubscribes from all events.
            </summary>
            <remarks>
            This method should not be invoked directly since the DesktopSystem instance is automatically disposed
            during Runtime disconnect and cleanup. Calling this method on an active connection will leave the
            Runtime instance in an indeterminite state.
            </remarks>
        </member>
        <member name="T:Openfin.Desktop.Runtime">
            <summary>
            Class representing an OpenFin Runtime object.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Runtime.Connected">
            <summary>
            Connected Event.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Runtime.Disconnected">
            <summary>
            Disconnected Event.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Runtime.OnIncommingMessage">
            <summary>
            On Incomming Message event.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Runtime.OnOutgoingMessage">
            <summary>
            On Outgoing message event.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Runtime.Error">
            <summary>
            Exceptions 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Runtime.DesktopConnection">
            <summary>
            Instance of the current DesktopConnection 
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Runtime.InterApplicationBus">
            <summary>
            Instance of the current InterApplicationBus
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Runtime.System">
            <summary>
            The core DesktopSystem for this runtime instance.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Runtime.Options">
            <summary>
            Instance of the current RuntimeOptions.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Runtime.IsConnected">
            <summary>
            Gets a value that indicates whether the Runtime instance is connected.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Runtime.GetRuntimeInstance(Openfin.Desktop.RuntimeOptions)">
            <summary>
            Gets either an existing Runtime Object for a specific version and security realm or creates a new connection to the given version.
            </summary>
            <param name="runtimeOptions">Options object</param>
            <returns></returns>
        </member>
        <member name="M:Openfin.Desktop.Runtime.Connect(System.Action)">
            <summary>
            Connects to the runtime.
            </summary>
            <param name="onConnected">Will call the Action passed on a successfull connection.
            If the runtime was previously connection, this Action will be invoked immediately.</param>
        </member>
        <member name="M:Openfin.Desktop.Runtime.Disconnect(System.Action)">
            <summary>
            Disconnects from the Runtime.
            </summary>
            <param name="onDisconnected">Callback which is invoked when the Runtime has disconnected.</param>
        </member>
        <member name="M:Openfin.Desktop.Runtime.CreateApplication(Openfin.Desktop.ApplicationOptions)">
            <summary>
            Creates a new application using the specified options.
            </summary>
            <param name="applicationOptions">The application options to use when creating the application.</param>
            <returns>The created application.</returns>
        </member>
        <member name="M:Openfin.Desktop.Runtime.WrapApplication(System.String)">
            <summary>
            Wraps an existing application using the specified UUID.
            </summary>
            <param name="uuid">The UUID of the application that is being wrapped.</param>
            <returns>The wrapped application.</returns>
        </member>
        <member name="M:Openfin.Desktop.Runtime.WrapExternalApplication(System.String)">
            <summary>
            Wraps an existing external application using the specified UUID.
            </summary>
            <param name="uuid">The UUID of the external application that is being wrapped.</param>
            <returns>The wrapped external application.</returns>
        </member>
        <member name="M:Openfin.Desktop.Runtime.ConnectAndRun(System.Action)">
            <summary>
            Connects to the runtime and runs the application specified by the <see cref="P:Openfin.Desktop.RuntimeOptions.StartupApplicationOptions"/> property.
            </summary>
            <param name="onConnected">The action to perform after the application is connected.
            If the application was previously running, this Action will be invoked immediately.</param>
        </member>
        <member name="M:Openfin.Desktop.Runtime.Dispose">
            <summary>
            Disposes the Runtime instance and closes the underlying connection.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            Win32 call to Re-Parent a Window.
            </summary>
            <param name="hWndChild">Window handle to be re-parented</param>
            <param name="hWndNewParent">Window handle of the new parent window</param>
            <returns>Parent Handle</returns>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary> 
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary> 
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStyles.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.Invalidate">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_INVALIDATE invalidates the entire window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.InternalPaint">
            <summary>Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.Erase">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.Validate">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.NoErase">
            <summary>Suppresses any pending WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.NoChildren">
            <summary>Excludes child windows, if any, from the repainting operation.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.AllChildren">
            <summary>Includes child windows, if any, in the repainting operation.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.UpdateNow">
            <summary>Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.RedrawWindowFlags.EraseNow">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_ACCEPTFILES">
            <summary>Specifies a window that accepts drag-drop files.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_APPWINDOW">
            <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_CLIENTEDGE">
            <summary>Specifies a window that has a border with a sunken edge.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_COMPOSITED">
            <summary>
            Specifies a window that paints all descendants in bottom-to-top painting order using double-buffering.
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. This style is not supported in Windows 2000.
            </summary>
            <remarks>
            With WS_EX_COMPOSITED set, all descendants of a window get bottom-to-top painting order using double-buffering.
            Bottom-to-top painting order allows a descendent window to have translucency (alpha) and transparency (color-key) effects,
            but only if the descendent window also has the WS_EX_TRANSPARENT bit set.
            Double-buffering allows the window and its descendents to be painted without flicker.
            </remarks>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_CONTEXTHELP">
            <summary>
            Specifies a window that includes a question mark in the title bar. When the user clicks the question mark,
            the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message.
            The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command.
            The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_CONTROLPARENT">
            <summary>
            Specifies a window which contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window when performing navigation operations
            such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_DLGMODALFRAME">
            <summary>Specifies a window that has a double border.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_LAYERED">
            <summary>
            Specifies a window that is a layered window.
            This cannot be used for child windows or if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_LAYOUTRTL">
            <summary>
            Specifies a window with the horizontal origin on the right edge. Increasing horizontal values advance to the left.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_LEFT">
            <summary>Specifies a window that has generic left-aligned properties. This is the default.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_LEFTSCROLLBAR">
            <summary>
            Specifies a window with the vertical scroll bar (if present) to the left of the client area.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_LTRREADING">
            <summary>
            Specifies a window that displays text using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_MDICHILD">
            <summary>
            Specifies a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_NOACTIVATE">
            <summary>
            Specifies a top-level window created with this style does not become the foreground window when the user clicks it.
            The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_NOINHERITLAYOUT">
            <summary>
            Specifies a window which does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_OVERLAPPEDWINDOW">
            <summary>Specifies an overlapped window.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_PALETTEWINDOW">
            <summary>Specifies a palette window, which is a modeless dialog box that presents an array of commands.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_RIGHT">
            <summary>
            Specifies a window that has generic "right-aligned" properties. This depends on the window class.
            The shell language must support reading-order alignment for this to take effect.
            Using the WS_EX_RIGHT style has the same effect as using the SS_RIGHT (static), ES_RIGHT (edit), and BS_RIGHT/BS_RIGHTBUTTON (button) control styles.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_RIGHTSCROLLBAR">
            <summary>Specifies a window with the vertical scroll bar (if present) to the right of the client area. This is the default.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_RTLREADING">
            <summary>
            Specifies a window that displays text using right-to-left reading-order properties.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_STATICEDGE">
            <summary>Specifies a window with a three-dimensional border style intended to be used for items that do not accept user input.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_TOOLWINDOW">
            <summary>
            Specifies a window that is intended to be used as a floating toolbar.
            A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font.
            A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB.
            If a tool window has a system menu, its icon is not displayed on the title bar.
            However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_TOPMOST">
            <summary>
            Specifies a window that should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
            To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_TRANSPARENT">
            <summary>
            Specifies a window that should not be painted until siblings beneath the window (that were created by the same thread) have been painted.
            The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WindowStylesEx.WS_EX_WINDOWEDGE">
            <summary>Specifies a window that has a border with a raised edge.</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_DRAWFRAME">
            <Summary>Draws a frame (defined in the window's class description) around the window.</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_FRAMECHANGED">
            <Summary>Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_HIDEWINDOW">
            <Summary>Hides the window.</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOACTIVATE">
            <Summary>Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOCOPYBITS">
            <Summary>Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOMOVE">
            <Summary>Retains the current position (ignores the x and y parameters).</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOOWNERZORDER">
            <Summary>Does not change the owner window's position in the Z order.</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOREDRAW">
            <Summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOREPOSITION">
            <Summary>Same as the SWP_NOOWNERZORDER flag.</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOSENDCHANGING">
            <Summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOSIZE">
            <Summary>Retains the current size (ignores the cx and cy parameters).</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_NOZORDER">
            <Summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</Summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.DeferWindowPosCommands.SWP_SHOWWINDOW">
            <Summary>Displays the window.</Summary>
        </member>
        <member name="T:Openfin.Desktop.NativeMethods.SpecialWindowHandles">
            <summary>
                Special window handles
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SpecialWindowHandles.HWND_TOP">
            <summary>
                Places the window at the top of the Z order.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SpecialWindowHandles.HWND_BOTTOM">
            <summary>
                Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SpecialWindowHandles.HWND_TOPMOST">
            <summary>
                Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SpecialWindowHandles.HWND_NOTOPMOST">
            <summary>
                Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_ASYNCWINDOWPOS">
            <summary>
                If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_DEFERERASE">
            <summary>
                Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_DRAWFRAME">
            <summary>
                Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_FRAMECHANGED">
            <summary>
                Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_HIDEWINDOW">
            <summary>
                Hides the window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOACTIVATE">
            <summary>
                Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOCOPYBITS">
            <summary>
                Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOMOVE">
            <summary>
                Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOOWNERZORDER">
            <summary>
                Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOREDRAW">
            <summary>
                Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOREPOSITION">
            <summary>
                Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOSENDCHANGING">
            <summary>
                Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOSIZE">
            <summary>
                Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_NOZORDER">
            <summary>
                Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.SetWindowPosFlags.SWP_SHOWWINDOW">
            <summary>
                Displays the window.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.NativeMethods.WM">
            <summary>
            Windows Messages
            Defined in winuser.h from Windows SDK v6.1
            Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. 
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. 
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window. 
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed. 
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. 
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_ACCESSIBILITYSTATE">
            <summary>
            The accessibility state has changed.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_ACTIVATESHELLWINDOW">
            <summary>
            The shell should activate its main window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_APPCOMMAND">
            <summary>
            The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
            If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_GETMINRECT">
            <summary>
            A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_LANGUAGE">
            <summary>
            Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_REDRAW">
            <summary>
            The title of a window in the task bar has been redrawn.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_TASKMAN">
            <summary>
            The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_WINDOWCREATED">
            <summary>
            A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_WINDOWDESTROYED">
            <summary>
            A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_WINDOWACTIVATED">
            <summary>
            The activation has changed to a different top-level, unowned window.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.WM.HSHELL_WINDOWREPLACED">
            <summary>
            A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.TernaryRasterOperations.CAPTUREBLT">
            <summary>
            Capture window as seen on screen.  This includes layered windows 
            such as WPF windows with AllowsTransparency="true"
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.MBUTTON">
            <summary>
            Middle mouse button (three-button mouse)
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.XBUTTON1">
            <summary>
            Windows 2000/XP: X1 mouse button
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.XBUTTON2">
            <summary>
            Windows 2000/XP: X2 mouse button
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KANA">
            <summary>
            Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.KEY_Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard) 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F17">
            <summary>
            F17 key  
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F18">
            <summary>
            F18 key  
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F19">
            <summary>
            F19 key  
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F20">
            <summary>
            F20 key  
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F21">
            <summary>
            F21 key  
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F22">
            <summary>
            F22 key, (PPC only) Key used to lock device.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F23">
            <summary>
            F23 key  
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.F24">
            <summary>
            F24 key  
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LSHIFT">
            <summary>
            Left SHIFT key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.RSHIFT">
            <summary>
            Right SHIFT key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LCONTROL">
            <summary>
            Left CONTROL key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.RCONTROL">
            <summary>
            Right CONTROL key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LMENU">
            <summary>
            Left MENU key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.RMENU">
            <summary>
            Right MENU key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.BROWSER_BACK">
            <summary>
            Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.BROWSER_FORWARD">
            <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.BROWSER_REFRESH">
            <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.BROWSER_STOP">
            <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.BROWSER_SEARCH">
            <summary>
            Windows 2000/XP: Browser Search key 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.BROWSER_FAVORITES">
            <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.BROWSER_HOME">
            <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.VOLUME_MUTE">
            <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.VOLUME_DOWN">
            <summary>
            Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.VOLUME_UP">
            <summary>
            Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.MEDIA_NEXT_TRACK">
            <summary>
            Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.MEDIA_PREV_TRACK">
            <summary>
            Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.MEDIA_STOP">
            <summary>
            Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.MEDIA_PLAY_PAUSE">
            <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LAUNCH_MAIL">
            <summary>
            Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LAUNCH_MEDIA_SELECT">
            <summary>
            Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LAUNCH_APP1">
            <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.LAUNCH_APP2">
            <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_PLUS">
            <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_COMMA">
            <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_MINUS">
            <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_PERIOD">
            <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_102">
            <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.PROCESSKEY">
            <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.PACKET">
            <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.NONAME">
            <summary>
            Reserved 
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:Openfin.Desktop.NativeMethods.VK.OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="T:Openfin.Desktop.Window">
            <summary>
                A window that can be controlled by the AppDesktop API. 
                <para>
                    Window objects are available through application.getWindow(). 
                    This class can not be instantiated directly. 
                </para>
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.#ctor(Openfin.Desktop.Application)">
            <summary>
                Window Constructor.
            </summary>
            <param name="application">the parent Application<see cref="P:Openfin.Desktop.Window.Application"/></param>
        </member>
        <member name="M:Openfin.Desktop.Window.#ctor(System.String,System.String,Openfin.Desktop.DesktopConnection)">
            <summary>
                Attaches a Window object to an application Window that already exists.
                <seealso cref="M:Openfin.Desktop.Application.wrap(System.String,Openfin.Desktop.DesktopConnection)"/>
            </summary>
            <param name="applicationUUID">The UUID of the parent Application.</param>
            <param name="name">The name of the Window</param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="E:Openfin.Desktop.Window.AuthenticationRequested">
            <summary>
            Occurs when the window has requested authentication credentials.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Blurred">
            <summary>
            Occurs when the window loses focus and is no longer active.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.BoundsChanged">
            <summary>
            Occurs when the window size or position has changed.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.BoundsChanging">
            <summary>
            Occurs when the window size or position is changing.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Closed">
            <summary>
            Occurs when the window has been closed.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.CloseRequested">
            <summary>
            Occurs when a window is requesting to be closed.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Initialized">
            <summary>
            Occurs when the window has been initialized.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Connected">
            <summary>
            Occurs when the window has connected to the OpenFin runtime.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.DisabledFrameBoundsChanged">
            <summary>
            Occurs when the the window size or position has changed, and the window is frameless.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.DisabledFrameBoundsChanging">
            <summary>
            Occurs when the window size or position is changing and the window is frameless.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.DOMContentLoaded">
            <summary>
            Occurs when the window DOM content has loaded.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Focused">
            <summary>
            Occurs when the window is activated or received focus.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.ResponseReceived">
            <summary>
            Occurs when the window has received an HTTP resource response.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.LoadFailed">
            <summary>
            Occurs when the window has failed to load a requested resource.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.NotResponding">
            <summary>
            Occurs when the window is not responding.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Responding">
            <summary>
            Occurs when the window is responding following a not responding event.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.FrameDisabled">
            <summary>
            Occurs when the window frame is disabled.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.FrameEnabled">
            <summary>
            Occurs when the window frame is enabled.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.GroupChanged">
            <summary>
            Occurs when the window as been added to or removed from a group,
            or another window has been added to or removed from a group to which
            the window belongs.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Hidden">
            <summary>
            Occurs when the window is hidden.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Maximized">
            <summary>
            Occurs when the window is maximized.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Minimized">
            <summary>
            Occurs when the window is minimized.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Restored">
            <summary>
            Occurs when the window is restored.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.Shown">
            <summary>
            Occurs when the window is shown.
            </summary>
        </member>
        <member name="E:Openfin.Desktop.Window.ShowRequested">
            <summary>
            Occurs when a window is requesting to be shown.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Window.Handle">
            <summary>
            Gets the window handle of the OpenFin window
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Window.Application">
            <summary>
            Gets the Application that created the Window.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Window.Name">
            <summary>
            Gets the name of the Openfin Window.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Window.Url">
            <summary>
            Gets the URL of the Openfin Window.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Window.Title">
            <summary>
            Gets the Title of the Openfin Window.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Window.CanNavigateBack">
            <summary>
            Indicates if back navigation is available.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.Window.CanNavigateForward">
            <summary>
            Indicates if forward navigation is available.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.Initialize">
            <summary>
                Allocates and prepares internal JObjects.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.wrap(System.String,System.String,Openfin.Desktop.DesktopConnection)">
            <summary>
                Attaches a Window object to an application Window that already exists.
            </summary>
            <param name="applicationUUID">The UUID of the parent Application.</param>
            <param name="windowName">The name of the Window</param>
            <param name="desktopConnection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.Window.getUuid">
            <summary>
                Returns the parent Application's UUID.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.getName">
            <summary>
                Returns the name of the window As registered with the AppDesktop.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.addEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Registers an event listener on the specified event. 
            </summary>
            <param name="type">
                A JSON object containing subscription information such as the topic and type.
            </param>
            <param name="listener">
                A function that is called whenever an event of the specified type occurs.
                It is passed an event object containing information related to the event.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.adoptWindow(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Reparents the passed HWND with the current AppDesktop window.
            </summary>
            <param name="hwnd">The window handle to reparent.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.animate(Openfin.Desktop.AnimationTransitions,Openfin.Desktop.AnimationOptions,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Performs the specified window transitions.
            </summary>
            <param name="transitions">
                Describes the animations to preform.
                <see cref="T:Openfin.Desktop.AnimationTransitions"/>
            </param>
            <param name="options">
                Options for the animation.
            <see cref="T:Openfin.Desktop.AnimationOptions"/>
            </param>
            <param name="callback">
                (Optional) A function that is called once all transitions have been completed or interrupted.
                The result state is passed as an object.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            
        </member>
        <member name="M:Openfin.Desktop.Window.blur(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes focus from the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.bringToFront(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Brings the window to the front of the window stack.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.close(System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Closes the window.
            </summary>
            <param name="force">
                When true the close can not be prevented through the window event 'close-requested'
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.disableFrame(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Prevents a user from changing a window's size/position when using the window's frame.
                
            <remarks>
                'disabled-frame-bounds-changing' is generated at the start of and during a user move/size operation. 
                'disabled-frame-bounds-changed' is generated after a user move/size operation.
                The events provide the bounds that would have been applied if the frame was enabled.
             
                'frame-enabled' is generated when a disabled frame has becomes enabled.
            </remarks>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.enableFrame(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Re-enables user changes to a window's size/position when using the window's frame.
                
            <remarks>
                'disabled-frame-bounds-changing' is generated at the start of and during a user move/size operation. 
                'disabled-frame-bounds-changed' is generated after a user move/size operation.
                 The events provide the bounds that would have been applied if the frame was enabled.
                 
                'frame-enabled' is generated when a disabled frame has becomes enabled.
            </remarks>
            
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.flash(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Draws attention to the window by flashing the taskbar and window caption.
                <para>This effect continues until explicitly removed by calling stopFlashing</para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.focus(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gives focus to the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getBounds(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets the current bounds (top, left, width, height) of the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getGroup(Openfin.Desktop.windowGroupHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Passes a list of wrapped windows in the same group.
            </summary>
            <remarks>
                An empty list is returned if the window is not in a group. 
                The calling window is included in the resulting List.
            </remarks>
            <param name="groupHandler">
                A delegate that receives a list of wrapped windows in the same group.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getNativeId(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets the window's platform specific identifier.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds and passes the native id.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getOptions(Openfin.Desktop.windowOptionsHandler,Openfin.Desktop.AckCallback)">
            <summary>
                Returns the current options as stored in the desktop.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getParentApplication">
            <summary>
                Returns the wrapped application that this window belongs to.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.getParentWindow">
            <summary>
                Returns the wrapped main window of the application that this window belongs to.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.getSnapshot(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets a base64 encoded PNG snapshot of the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getState(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets the current state ("minimized", "maximized", or "restored") of the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.hide(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Hides the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.isShowing(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Determines if the window is currently showing.
            </summary>
            <param name="callback">
                A function that is called if the method succeeds and 
                passed an object containg the visiblity of the window.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.joinGroup(Openfin.Desktop.Window,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Joins the same window group as the specified window. 
            </summary>
            <remarks>
                When windows are joined, if the user moves one of the windows, 
                all other windows in the same group move too. This function is 
                to be used when docking to other windows. If the window is 
                already within a group, it will leave that group to join the 
                new one. Windows must be owned by the same application in order 
                to be joined.
            </remarks>
            <param name="target">The window whose group is to be joined.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.leaveGroup(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Leaves the current window group so that the window 
                can be move independently of those in the group.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.maximize(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Maximizes the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.mergeGroups(Openfin.Desktop.Window,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Merges the instance's window group with the same window group as the specified window.
            </summary>
            <remarks>
               When windows are joined, if the user moves one of the windows, 
               all other windows in the same group move too. This function is 
               to be used when docking to other windows. If the window is 
               already within a group, The two groups are joined to create a 
               new one. Windows must be owned by the same application in order 
               to be joined.
            </remarks>
            <param name="target">The window whose group is to be merged.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.minimize(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Minimizes the window.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.moveBy(System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Moves the window by a specified amount.
            </summary>
            <param name="deltaLeft">The change in the left position of the window.</param>
            <param name="deltaTop">The change in the top position of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.moveTo(System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Moves the window to a specified location.
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The top position of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.moveToSync(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the window to a specified location. synchronously 
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The top position of the window.</param>
            <param name="width">The window's new width</param>
            <param name="height">The window's new height</param>
        </member>
        <member name="M:Openfin.Desktop.Window.orphanWindow(System.String,System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Unparents the window identified by HWND and moves it to left, top.
            </summary>
            <param name="hwnd">The child window handle to orphan and move.</param>
            <param name="left">The new left position of the window.</param>
            <param name="top">The new top position of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.removeEventListener(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a previously registered event listener from the specified event.
                <para>
                    The listener is passed an event object containing information 
                    related to the event.
                </para>
            </summary>
            <remarks>
                Supported system event types are:
                    blurred
                    bounds-changed
                    bounds-changing
                    closed
                    close-requested
                    disabled-frame-bounds-changed
                    disabled-frame-bounds-changing
                    focused
                    frame-disabled
                    frame-enabled
                    group-changed
                    hidden
                    maximized
                    minimized
                    restored
                    shown
            </remarks>
            <param name="type">The type of the event.</param>
            <param name="listener">
                A function that was called whenever an event of the specified type occurs.
                It is no longer called in response to an event of the passed type.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.resizeBy(System.Int32,System.Int32,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Resizes the window by the specified amount.
            </summary>
            <param name="deltaWidth">The change in the width of the window.</param>
            <param name="deltaHeight">The change in the height of the window.</param>
            <param name="anchor">
                Specifies a corner to remain fixed during the resize.
                Can take the values: 
                    "top-left"
                    "top-right"
                    "bottom-left"
                    "bottom-right" 
                If undefined, the default is "top-left".
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.resizeBy(System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Resizes the window by the specified amount with a "top-left" anchor
            </summary>
            <param name="deltaWidth">The change in the width of the window.</param>
            <param name="deltaHeight">The change in the height of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.resizeTo(System.Int32,System.Int32,System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Resizes the window to the specified dimensions.
            </summary>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="anchor">
                Specifies a corner to remain fixed during the resize.
                Can take the values: 
                    "top-left"
                    "top-right"
                    "bottom-left"
                    "bottom-right" 
                If undefined, the default is "top-left".
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.resizeTo(System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Resizes the window to the specified dimensions with a "top-left" anchor.
            </summary>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.restore(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Restores the window to its normal state (i.e., unminimized, unmaximized).
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.show(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback,System.Boolean)">
            <summary>
                Shows the window if it is hidden.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
            <param name="force">
            (Optional) Forces the window to be shown
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.showAt(System.Int32,System.Int32,System.Boolean,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Shows the window if it is hidden at the specified location.
                <para>
                    If the toggle parameter is set to true, the window will
                    alternate between showing and hiding.
                </para>
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The right position of the window.</param>
            <param name="toggle">
                If true, the window will alternate between showing and hiding in subsequent calls.
            </param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.setAsForeground(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Set's the window as the foreground window. 
                <para>
                    The window is activated(focused) and brought to front.
                </para>
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.setBounds(System.Int32,System.Int32,System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Set's the bounds (top, left, width, height) of the window. 
            </summary>
            <param name="left">The left position of the window.</param>
            <param name="top">The top position of the window.</param>
            <param name="width">The width of the window.</param>
            <param name="height">The height of the window.</param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.stopFlashing(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Removes a flashing taskbar/window caption effect if present.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.updateOptions(Openfin.Desktop.WindowOptions,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Changes a window's options that were defined upon creation.
            </summary>
            <param name="options">The window options to change<seealso cref="T:Openfin.Desktop.WindowOptions"/></param>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.embedInto(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Embeds a window in a target hWin
            </summary>
            <param name="parentWindowHandle">This will be the parent window handle</param>
            <param name="width">The change in the width of the window.</param>
            <param name="height">The change in the height of the window.</param>
            <param name="left">(Optional) The left position of the window.</param>
            <param name="top">(Optional) The top position of the window.</param>
            <param name="callback">(Optional) A function that is called if the method succeeds.</param>
            <param name="errorCallback">(Optional) A function that is called if the method succeeds.</param>
        </member>
        <member name="M:Openfin.Desktop.Window.showDeveloperTools(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Shows window's developer tools.
            </summary>
            <param name="callback">
            (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
            (Optional) A function that is called if the method fails.
            The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.BringParentToFront">
            <summary>
            Will set the focus on the Parent container, in the case of windows being embeded.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.parentWindowMovedCalibration">
            <summary>
            In an embedded window scenario, when the parent window moves there is calibration needed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.parentWindowMoveStartCalibration">
            <summary>
            In an embedded window scenario, when the parent window starts to move there is calibration needed.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.navigate(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Navigates the Widnow to the specified address.
            </summary>
            <param name="url">
            The URL that you want to navigate to.
            </param>
            <param name="callback">
            (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
            (Optional) A function that is called if the method fails.
            The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.navigateForward(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Navigates the Widnow to the forward content.
            </summary>
            <param name="callback">
            (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
            (Optional) A function that is called if the method fails.
            The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.navigateBack(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Navigates the Widnow to the previous content.
            </summary>
            <param name="callback">
            (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
            (Optional) A function that is called if the method fails.
            The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.reload(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Reloads the Widnow content.
            </summary>
            <param name="callback">
            (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
            (Optional) A function that is called if the method fails.
            The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.stopWindowNavigation(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Stops currently loading Widnow content.
            </summary>
            <param name="callback">
            (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
            (Optional) A function that is called if the method fails.
            The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.refresh(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Causes the Window to refresh.
            </summary>
            <param name="callback">
            (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
            (Optional) A function that is called if the method fails.
            The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.executeJavascript(System.String,Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
            Executes JavaScript on the content of the Window
            </summary>
            <param name="script">
            JavaScript code to be executed
            </param>
            <param name="callback">
            (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
            (Optional) A function that is called if the method fails.
            The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="M:Openfin.Desktop.Window.getInfo(Openfin.Desktop.AckCallback,Openfin.Desktop.AckCallback)">
            <summary>
                Gets the window information.
            </summary>
            <param name="callback">
                (Optional) A function that is called if the method succeeds.
            </param>
            <param name="errorCallback">
                (Optional) A function that is called if the method fails.
                The reason for failure is passed as an argument.
            </param>
        </member>
        <member name="T:Openfin.Desktop.Window.GroupChangedPayload">
            <summary>
                Helper struct representing the payload returned by the window event 'group-changed'
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.memberOf">
            <summary>
                Which group array the window that the event listener was 
                registered on is included in.
            </summary> 
            <remarks>
                'source'  The window is included in sourceGroup
                'target'  The window is included in targetGroup
                'nothing' The window is not included in sourceGroup nor targetGroup,
            </remarks>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.name">
            <summary>
                The name of the window
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.reason">
            <summary>
                The reason this event was triggered.
            </summary>
            <remarks>
                'leave'   A window has left the group due to a leave or merge with group.
                'join'    A window has joined the group.
                'merge'   Two groups have been merged together.
                'disband' There are no other windows in the group
            </remarks>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.sourceGroup">
            <summary>
                All the windows in the group the sourceWindow originated from
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.sourceWindowAppUuid">
            <summary>
                The UUID of the application the sourceWindow belongs to. 
                The source window is the window in which (merge/join/leave)group(s) was called.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.sourceWindowName">
            <summary>
                the name of the sourcewindow. The source window is 
                the window in which (merge/join/leave)group(s) was called.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.targetGroup">
            <summary>
                All the windows in the group the targetWindow originated from.
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.targetWindowAppUuid">
            <summary>
                The UUID of the application the targetWindow belongs to. 
                The target window is the window that was passed into (merge/join)group(s).
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.targetWindowName">
            <summary>
                The name of the targetWindow. 
                The target window is the window that was passed into (merge/join)group(s)
            </summary>
        </member>
        <member name="F:Openfin.Desktop.Window.GroupChangedPayload.uuid">
            <summary>
                The UUID of the application the window belongs to
            </summary>
        </member>
        <member name="M:Openfin.Desktop.Window.GroupChangedPayload.#ctor(Openfin.Desktop.Ack,Openfin.Desktop.DesktopConnection)">
            <summary>
                Populates values from the ACK of a window 'group-changed' payload
            </summary>
            <param name="payload">The payload of a 'group-changed' event handler<see cref="T:Openfin.Desktop.Ack"/></param>
            <param name="connection">Connection object to the AppDesktop.<see cref="T:Openfin.Desktop.DesktopConnection"/></param>
        </member>
        <member name="M:Openfin.Desktop.Window.Dispose">
            <summary>
            Disposes the current window reference and unhooks all subscribed events.
            </summary>
        </member>
        <member name="T:Openfin.Desktop.WindowOptions">
            <summary>
                A class representing the options for a Window.
            </summary>
        </member>
        <member name="M:Openfin.Desktop.WindowOptions.#ctor(System.String)">
            <summary>
                Constructs an instance with a new underliying JObject.
            </summary>
            <param name="name">The windows name</param>
        </member>
        <member name="M:Openfin.Desktop.WindowOptions.#ctor(System.String,System.String)">
            <summary>
                Constructs an instance with a new underliying JObject.
            </summary>
            <param name="name">The windows name</param>
            <param name="url">The windows URL</param>
        </member>
        <member name="M:Openfin.Desktop.WindowOptions.getJsonCopy">
            <summary>
                Gets all settings in JObject format.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Name">
            <summary>
                The Name property represents the name for the window which 
                must be unique within the context of the invoking Application.
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The Name property gets/sets the value of the underlying 
                JObject field, "name".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.AcceleratorKeys">
            <summary>
            Gets or sets the options for accelerator keys on the current window
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.AlwaysOnTop">
            <summary>
                The AlwaysOnTop property represents a flag to always position 
                the window at the top of the window stack.  
                <para>Default: false</para>
            </summary> 
            <value>
                The AlwaysOnTop property gets/sets the value of the 
                underlying JObject field, "alwaysOnTop".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.AutoShow">
            <summary>
                The AutoShow property represents a flag to automatically 
                show the Window when it is created.
                <para>Default: false</para>
            </summary> 
            <value>
                The AutoShow property gets/sets the value of the 
                underlying JObject field, "autoShow".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.BackgroundColor">
            <summary>
            Gets or sets the backfill color of the current window. The default is black.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ContentNavigationRules">
            <summary>
            Navigation rules used by this window.
            <para>Default: No application rules, Window will be allowed to navigate to any URL.</para>
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ContextMenu">
            <summary>
                The ContextMenu property represents a flag to show the 
                context menu when right-clicking on a window.
                <para>Gives access to the Developer Console for the Window.</para>
                <para>Default: false</para>
            </summary> 
            <value>
                The ContextMenu property gets/sets the value of the 
                underlying JObject field, "contextMenu".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.CornerRoundingHeight">
            <summary>
                The CornerRoundingHeight property represents the rounded 
                corners height to apply.
                <para>Default: 0</para>
            </summary> 
            <value>
                The CornerRoundingHeight property gets/sets the value of the 
                underlying JObject field, "cornerRounding.height".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.CornerRoundingWidth">
            <summary>
                The CornerRoundingWidth property represents the rounded 
                corners width to apply.
                <para>Default: 0</para>
            </summary> 
            <value>
                The CornerRoundingWidth property gets/sets the value of the 
                underlying JObject field, "cornerRounding.width".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.CustomData">
            <summary>
            Gets or sets custom data for the given Window instance.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultCentered">
             <summary>
                 The DefaultCentered property specifies that the window will be positioned in the 
                 center of the primary monitor when loaded for the first time on a machine. 
            
                 <para>Default: false</para>
             </summary> 
             <remarks>
                 When the window corresponding to that id is loaded again, the position 
                 from before the window was closed is used.
             </remarks>
             <value>
                 The DefaultCentered property gets/sets the value of the 
                 underlying JObject field, "defaultCentered".
             </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultHeight">
            <summary>
                The DefaultHeight property represents the window's 
                default height in pixels.
                <para>Default: 500</para>
            </summary> 
            <remarks>
                Specifies the height of the window when loaded for the first 
                time on a machine. When a window with the same name and 
                parent application UUID is loaded again, the height is taken to be the 
                last height of the window before it was closed.
            </remarks>
            <value>
                The DefaultHeight property gets/sets the value of the 
                underlying JObject field, "defaultHeight".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultLeft">
            <summary>
                The DefaultLeft property represents the window's 
                default left position.
                <para>Default: 100</para>
            </summary> 
            <remarks>
                Specifies the left position of the window when loaded for the first 
                time on a machine. When a window with the same name and 
                parent application UUID is loaded again, the value of left is 
                taken to be the last value before the window was closed.
            </remarks>
            <value>
                The DefaultLeft property gets/sets the value of the 
                underlying JObject field, "defaultLeft".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultTop">
            <summary>
                The DefaultTop property represents the window's 
                default top position.
                <para>Default: 100</para>
            </summary> 
            <remarks>
                Specifies the top position of the window when loaded for the first 
                time on a machine. When a window with the same name and 
                parent application UUID is loaded again, the value of top is 
                taken to be the last value before the window was closed.
            </remarks>
            <value>
                The DefaultTop property gets/sets the value of the 
                underlying JObject field, "defaultTop".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.DefaultWidth">
            <summary>
                The DefaultWidth property represents the window's 
                default width in pixels.
                <para>Default: 800</para>
            </summary> 
            <remarks>
                Specifies the width of the window when loaded for the first 
                time on a machine. When a window with the same name and 
                parent application UUID is loaded again, the height is taken to be the 
                last width of the window before it was closed.
            </remarks>
            <value>
                The DefaultWidth property gets/sets the value of the 
                underlying JObject field, "defaultWidth".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Frame">
            <summary>
                The Frame property represents a flag to show the frame. 
                <para>Default: true</para>
            </summary> 
            <value>
                The Frame property gets/sets the value of the 
                underlying JObject field, "frame".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.IconPath">
            <summary>
            Absolute path, relative path, or URL of the icon file to be shown in the window title bar and taskbar.
            When ommitted, inherits from the parent application.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.IconUrl">
            <summary>
            Absolute URL of the icon file to be shown on the windoe title bar and taskbar, as defined in IconPath
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.HideOnClose">
            <summary>
            (Obsolete) The HideOnClose property represents a flag to allow a window 
            to be hidden when the close button is clicked.
            <para>Default: false</para>
            </summary> 
            <value>
            The HideOnClose property gets/sets the value of the 
            underlying JObject field, "hideOnClose".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.MaxHeight">
            <summary>
                The MaxHeight property represents the maximum height of a window.
                <para>Will default to the OS defined value if set to -1.</para>
                <para>Default: -1</para>
            </summary> 
            <value>
                The MaxHeight property gets/sets the value of the 
                underlying JObject field, "maxHeight".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Maximizable">
            <summary>
                The Maximizable property represents a flag that lets the window be maximized.
                <para>Default: true</para>
            </summary> 
            <value>
                The Maximizable property gets/sets the value of the 
                underlying JObject field, "maximizable".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.MaxWidth">
            <summary>
                The MaxWidth property represents the maximum width  of a window.
                <para>Will default to the OS defined value if set to -1.</para>
                <para>Default: -1</para>
            </summary> 
            <value>
                The MaxWidth property gets/sets the value of the 
                underlying JObject field, "maxWidth".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.MinHeight">
            <summary>
                The MinHeight property represents the minimum height of a window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The MinHeight property gets/sets the value of the 
                underlying JObject field, "minHeight".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Minimizable">
            <summary>
                The Minimizable property represents a flag that lets the window be minimized.
                <para>Default: true</para>
            </summary> 
            <value>
                The Minimizable property gets/sets the value of the 
                underlying JObject field, "minimizable".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.MinWidth">
            <summary>
                The MinWidth property represents the minimum width of a window.
                <para>Default: 0</para>
            </summary> 
            <value>
                The MinWidth property gets/sets the value of the 
                underlying JObject field, "minWidth".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Opacity">
            <summary>
                The Opacity property represents a flag that specifies 
                how transparent the window will be.
                <para>Default: 1.0</para>
            </summary> 
            <value>
                The Opacity property gets/sets the value of the 
                underlying JObject field, "opacity".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.PreloadScript">
            <summary>
            (Deprecated) The preload Javascript file to load automatically after each page navigation.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.PreloadScripts">
            <summary>
            Gets or sets the collection of preload scripts to load automatically after each page navigation.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Resizable">
            <summary>
                The Resizable property represents a flag which allows 
                the user to resize the window.
                <para>This property will be deprecated in a future release.</para>
                <para>Default: true</para>
            </summary> 
            <value>
                The Resizable property gets/sets the value of the 
                underlying JObject field, "resizable".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ResizeRegionBottomRightCorner">
            <summary>
                The ResizeRegionBottomRightCorner property defines an additional square 
                region located at the bottom right corner of a frameless window.
                <para>Default: 4</para>
            </summary> 
            <value>
                The ResizeRegionBottomRightCorner property gets/sets the value of the 
                underlying JObject field, "resizeRegion.bottomRightCorner".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ResizeRegionSize">
            <summary>
                The ResizeRegionSize property defines a region 
                in pixels that will respond to user mouse interaction for resizing a frameless window
                <para>Default: 2</para>
            </summary> 
            <value>
                The ResizeRegionSize property gets/sets the value of the 
                underlying JObject field, "resizeRegion.size".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.SaveWindowState">
            <summary>
                The SaveWindowState property defines whether or not a window 
                should maintain a persistent cache of its position/size.
                <para>Default: true</para>
            </summary> 
            <value>
                The SaveWindowState property gets/sets the value of the 
                underlying JObject field, "saveWindowState".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.Shadow">
            <summary>
            Gets or sets a value indicating whether to show a shadow on a frameless Window.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.ShowTaskbarIcon">
            <summary>
                The ShowTaskbarIcon property represents a flag to show 
                the Window's icon in the taskbar.
                <para>Default: false</para>
            </summary> 
            <value>
                The ShowTaskbarIcon property gets/sets the value of the 
                underlying JObject field, "showTaskbarIcon".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.TaskbarIcon">
            <summary>
                (Obsolete) The TaskbarIcon property represents the URL of 
                an icon to be shown on the desktop.
                <para>
                    Support formats: 
                        Portable Network Graphic (PNG); Size: 256 x 256 
                </para>
                <para>Default: An empty string</para>
            </summary> 
            <value>
                The TaskbarIcon property gets/sets the value of the 
                underlying JObject field, "taskbarIcon".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.TaskbarIconGroup">
            <summary>
            Gets or sets the taskbar group for the window.
            </summary>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.State">
            <summary>
                The State property represents a string that sets the 
                window to be "minimized", "maximized", or "normal" on creation. 
                <para>Default: "normal"</para>
            </summary> 
            <value>
                The State property gets/sets the value of the 
                underlying JObject field, "state".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.URL">
            <summary>
                The URL property represents the URL of the window. 
                <para>Default: "about:blank"</para>
            </summary> 
            <value>
                The URL property gets/sets the value of the 
                underlying JObject field, "url".
            </value>
        </member>
        <member name="P:Openfin.Desktop.WindowOptions.WaitForPageLoadToRender">
            <summary>
            Determines if OpenFin will wait for DomContent Loaded to display the window.
            </summary>
        </member>
        <member name="T:Openfin.UIComponents.IEmbeddedView">
            <summary>
            Supports Embedding an OpenFin View.
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.IEmbeddedView.OpenfinWindow">
            <summary>
            The OpenFin Window Object being embedded.
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.IEmbeddedView.OpenfinApplication">
            <summary>
            Application that owns the embedded Window object.
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.IEmbeddedView.OpenfinRuntime">
            <summary>
            Instance of the Runtime object.
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.IEmbeddedView.IsReady">
            <summary>
            Is the Embedded view Ready
            </summary>
        </member>
        <member name="M:Openfin.UIComponents.IEmbeddedView.Initialize(Openfin.Desktop.RuntimeOptions,Openfin.Desktop.ApplicationOptions)">
            <summary>
            Initialize the Embedded component, this function will aquire a runtime object and create a new application.
            </summary>
            <param name="runtimeOptions">Runtime options</param>
            <param name="applicationOptions">Application options</param>
        </member>
        <member name="M:Openfin.UIComponents.IEmbeddedView.Initialize(Openfin.Desktop.RuntimeOptions,Openfin.Desktop.Window)">
            <summary>
            Initialize the Embedded component, this function will aquire a runtime object and embedd an existing OpenFin Window object.
            </summary>
            <param name="runtimeOptions">Runtime options</param>
            <param name="window">OpenFin Window to be embedded</param>
        </member>
        <member name="M:Openfin.UIComponents.IEmbeddedView.Initialize(Openfin.Desktop.RuntimeOptions,Openfin.Desktop.Application,Openfin.Desktop.WindowOptions)">
            <summary>
            Initialize the Embedded component, this function will aquire a runtime object and create a OpenFin Window under an existing application.
            </summary>
            <param name="runtimeOptions">Runtime options</param>
            <param name="application">Existing OpenFin application that will create the new window</param>
            <param name="windowOptions">Windows Options that will be used to create a new window.</param>
        </member>
        <member name="M:Openfin.UIComponents.IEmbeddedView.Close">
            <summary>
            Close the Embedded view.
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.IEmbeddedView.AutoScale">
            <summary>
            Determines wether the Embedded View Auto Scales upon parent resize.
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.IEmbeddedView.OnReady">
            <summary>
            The Embedded View is ready.
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.IEmbeddedView.OnForcedClosed">
            <summary>
            The Embedded View is ready.
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.IEmbeddedView.OnNavigationRejected">
            <summary>
            The Embedded View Navigation has been rejected.
            </summary>
        </member>
        <member name="T:Openfin.UIComponents.WindowShowRequestedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.WindowShowRequestedEventArgs.Window">
            <summary>
            The Affected OpenFinWindow
            </summary>
        </member>
        <member name="P:Openfin.UIComponents.WindowShowRequestedEventArgs.IsMainWindow">
            <summary>
            Is the window to be shown the main window?
            </summary>
        </member>
    </members>
</doc>
